/**
 * Hook sp√©cialis√© pour les mises √† jour de profil avec synchronisation automatique
 */

import { useCallback } from 'react';
import { useAuth } from './useAuth';
import { useUserSync } from './useUserSync';
import { updateUserProfile, uploadFile } from '../services/api';
import axiosInstance from '../api/axiosInstance';

export const useProfileUpdate = () => {
  const { user, refreshUser, updateUser } = useAuth();
  const { emitSyncEvent, forceRefresh } = useUserSync();

  /**
   * Met √† jour la photo de profil avec synchronisation
   * Utilise l'endpoint d√©di√© /users/:id/photo pour un workflow simplifi√©
   */
  const updateProfilePhoto = useCallback(async (file: File) => {
    if (!user?._id) {
      throw new Error('Utilisateur non connect√©');
    }

    try {
      console.log('üì∏ D√©but de la mise √† jour de la photo de profil...');
      
      // Utiliser l'endpoint d√©di√© /users/:id/photo qui fait tout en une fois
      const formData = new FormData();
      formData.append('file', file);

      const response = await axiosInstance.put(`/users/${user._id}/photo`, formData, {
        headers: {
          'Content-Type': 'multipart/form-data',
        },
      });

      if (response.data.success) {
        const newPhotoUrl = response.data.photoUrl;
        console.log('‚úÖ Photo mise √† jour:', newPhotoUrl);

        // Mettre √† jour directement l'utilisateur avec la nouvelle photo
        // au lieu de faire un refresh complet qui peut causer des boucles
        updateUser({ photoUrl: newPhotoUrl });

        // √âmettre un √©v√©nement de synchronisation pour les autres onglets
        emitSyncEvent({
          type: 'PHOTO_UPDATED',
          userId: user._id,
          data: { photoUrl: newPhotoUrl },
          timestamp: Date.now()
        });

        console.log('üîÑ √âv√©nement de synchronisation √©mis pour photo mise √† jour');
        return { success: true, imageUrl: newPhotoUrl };
      } else {
        throw new Error('√âchec de la mise √† jour de la photo');
      }

    } catch (error) {
      console.error('‚ùå Erreur lors de la mise √† jour de la photo:', error);
      throw error;
    }
  }, [user, refreshUser, emitSyncEvent]);

  /**
   * Met √† jour une photo de profil d'un autre utilisateur (admin/manager)
   */
  const updateOtherUserPhoto = useCallback(async (userId: string, file: File) => {
    if (!user?._id) {
      throw new Error('Utilisateur non connect√©');
    }

    try {
      console.log(`üì∏ D√©but de la mise √† jour de la photo pour l'utilisateur ${userId}...`);
      
      // Utiliser l'endpoint d√©di√© pour la mise √† jour de photo par ID
      const formData = new FormData();
      formData.append('file', file);

      const response = await axiosInstance.put(`/users/${userId}/photo`, formData, {
        headers: {
          'Content-Type': 'multipart/form-data',
        },
      });

      if (response.data.success) {
        console.log('‚úÖ Photo mise √† jour pour l\'utilisateur:', userId, response.data.photoUrl);

        // √âmettre un √©v√©nement de synchronisation pour l'utilisateur cibl√©
        emitSyncEvent({
          type: 'PHOTO_UPDATED',
          userId: userId,
          data: { photoUrl: response.data.photoUrl },
          timestamp: Date.now()
        });

        console.log('üîÑ √âv√©nement de synchronisation √©mis pour utilisateur:', userId);
        return { success: true, photoUrl: response.data.photoUrl };
      } else {
        throw new Error('√âchec de la mise √† jour de la photo');
      }

    } catch (error) {
      console.error('‚ùå Erreur lors de la mise √† jour de la photo d\'un autre utilisateur:', error);
      throw error;
    }
  }, [user, emitSyncEvent]);

  /**
   * Met √† jour le profil g√©n√©ral avec synchronisation
   */
  const updateProfile = useCallback(async (profileData: any) => {
    if (!user?._id) {
      throw new Error('Utilisateur non connect√©');
    }

    try {
      console.log('üìù D√©but de la mise √† jour du profil...');
      
      const updatedProfile = await updateUserProfile(profileData);
      console.log('‚úÖ Profil mis √† jour:', updatedProfile);

      // Mettre √† jour directement l'utilisateur avec les nouvelles donn√©es
      // au lieu de faire un refresh complet qui peut causer des boucles
      updateUser(profileData);

      // √âmettre un √©v√©nement de synchronisation
      emitSyncEvent({
        type: 'PROFILE_UPDATED',
        userId: user._id,
        data: profileData,
        timestamp: Date.now()
      });

      console.log('üîÑ √âv√©nement de synchronisation √©mis pour profil mis √† jour');
      return { success: true, profile: updatedProfile };

    } catch (error) {
      console.error('‚ùå Erreur lors de la mise √† jour du profil:', error);
      throw error;
    }
  }, [user, refreshUser, emitSyncEvent]);

  return {
    updateProfilePhoto,
    updateOtherUserPhoto,
    updateProfile,
    forceRefresh
  };
};