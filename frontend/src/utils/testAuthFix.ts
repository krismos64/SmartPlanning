/**
 * Test pour v√©rifier que la correction de l'authentification fonctionne
 * R√©sout le probl√®me : req.user.id vs req.user._id dans /api/auth/me
 */

import axiosInstance from "../api/axiosInstance";

/**
 * Test de v√©rification de la correction d'authentification
 */
export const testAuthenticationFix = async () => {
  console.log(`
üîß TEST DE CORRECTION D'AUTHENTIFICATION
================================================================

PROBL√àME IDENTIFI√â:
- L'endpoint /api/auth/me cherchait req.user.id
- Le middleware authenticateToken normalise vers req.user._id
- Incoh√©rence causant des erreurs 401 apr√®s mise √† jour de photo

CORRECTION APPLIQU√âE:
‚úÖ Chang√© req.user.id en req.user._id dans /api/auth/me

TESTS EN COURS...
================================================================
  `);

  try {
    // 1. Test d'authentification simple
    console.log("1Ô∏è‚É£ Test d'authentification de base...");
    const authResponse = await axiosInstance.get("/auth/me");
    
    if (authResponse.data.success) {
      console.log("‚úÖ Authentification de base fonctionne");
      console.log("üë§ Utilisateur:", authResponse.data.data.firstName, authResponse.data.data.lastName);
    } else {
      console.log("‚ùå Authentification de base √©choue");
      return { success: false, error: "Authentification de base √©choue" };
    }

    const user = authResponse.data.data;

    // 2. Test de mise √† jour de photo
    console.log("\n2Ô∏è‚É£ Test de mise √† jour de photo...");
    const testBlob = new Blob(['test-auth-fix'], { type: 'image/png' });
    const testFile = new File([testBlob], 'test-auth-fix.png', { type: 'image/png' });
    
    const formData = new FormData();
    formData.append('file', testFile);

    const photoResponse = await axiosInstance.put(`/users/${user._id}/photo`, formData, {
      headers: {
        'Content-Type': 'multipart/form-data',
      },
    });

    if (photoResponse.data.success) {
      console.log("‚úÖ Mise √† jour de photo r√©ussie");
      console.log("üì∏ Nouvelle URL:", photoResponse.data.photoUrl);
    } else {
      console.log("‚ùå Mise √† jour de photo √©choue");
      return { success: false, error: "Mise √† jour de photo √©choue" };
    }

    // 3. Test critique: v√©rifier l'authentification apr√®s mise √† jour
    console.log("\n3Ô∏è‚É£ Test critique: authentification apr√®s mise √† jour...");
    const postUpdateAuth = await axiosInstance.get("/auth/me");
    
    if (postUpdateAuth.data.success) {
      console.log("‚úÖ SUCC√àS: Authentification maintenue apr√®s mise √† jour de photo");
      console.log("üë§ Utilisateur toujours connect√©:", postUpdateAuth.data.data.firstName);
      
      // V√©rifier que la photo a √©t√© mise √† jour
      const photoUpdated = postUpdateAuth.data.data.photoUrl !== user.photoUrl;
      console.log("üì∏ Photo mise √† jour:", photoUpdated ? "‚úÖ OUI" : "‚ùå NON");
      
      return {
        success: true,
        authMaintained: true,
        photoUpdated: photoUpdated,
        message: "Correction d'authentification r√©ussie - probl√®me r√©solu !"
      };
    } else {
      console.log("‚ùå √âCHEC: Utilisateur toujours d√©connect√© apr√®s mise √† jour");
      return { 
        success: false, 
        authMaintained: false,
        error: "Probl√®me d'authentification persiste" 
      };
    }

  } catch (error) {
    console.error("‚ùå Erreur durant le test:", error);
    
    // V√©rifier si c'est un probl√®me 401 sp√©cifique
    if (error.response?.status === 401) {
      console.log("‚ùå CONFIRM√â: Probl√®me 401 - authentification √©choue");
      return { 
        success: false, 
        error: "Erreur 401 - authentification √©choue",
        status: 401
      };
    }
    
    return { 
      success: false, 
      error: error.message || "Erreur inconnue",
      status: error.response?.status
    };
  }
};

// Exposer pour utilisation dans la console
(window as any).testAuthenticationFix = testAuthenticationFix;

console.log(`
üîß FONCTION DE TEST DE CORRECTION D'AUTHENTIFICATION DISPONIBLE
================================================================

Pour tester la correction, ex√©cutez dans la console:
testAuthenticationFix()

Cette fonction teste:
1. ‚úÖ Authentification de base
2. ‚úÖ Mise √† jour de photo
3. ‚úÖ Authentification maintenue apr√®s mise √† jour

Si le test passe, le probl√®me de d√©connexion est r√©solu !
================================================================
`);