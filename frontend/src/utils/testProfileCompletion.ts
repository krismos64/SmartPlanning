/**
 * Utilitaire de test pour v√©rifier le workflow de compl√©tion de profil
 */

import axiosInstance from "../api/axiosInstance";

/**
 * Teste le workflow complet de compl√©tion de profil
 */
export const testProfileCompletionWorkflow = async () => {
  try {
    console.log("üß™ Test du workflow de compl√©tion de profil...");
    
    // 1. V√©rifier l'√©tat actuel de l'utilisateur
    const currentUser = await axiosInstance.get("/auth/me");
    console.log("üë§ Utilisateur actuel:", currentUser.data.data);
    
    const user = currentUser.data.data;
    console.log("üîç Profil complet ?", user.profileCompleted);
    
    // 2. Simuler la mise √† jour du profil
    if (!user.profileCompleted) {
      console.log("‚è≥ Mise √† jour du profil pour le marquer comme complet...");
      
      const profileUpdate = await axiosInstance.put("/profile/update", {
        firstName: user.firstName || "Test",
        lastName: user.lastName || "User",
        email: user.email,
        photoUrl: user.photoUrl || "https://via.placeholder.com/150"
      });
      
      console.log("‚úÖ Profil mis √† jour:", profileUpdate.data.data);
      console.log("üéâ Profil complet ?", profileUpdate.data.data.profileCompleted);
      
      // 3. V√©rifier que l'utilisateur est bien mis √† jour
      const updatedUser = await axiosInstance.get("/auth/me");
      console.log("üîÑ Utilisateur apr√®s mise √† jour:", updatedUser.data.data);
      
      return {
        success: true,
        message: "Workflow de compl√©tion de profil test√© avec succ√®s",
        before: user,
        after: updatedUser.data.data
      };
    } else {
      console.log("‚úÖ Le profil est d√©j√† complet");
      return {
        success: true,
        message: "Le profil est d√©j√† complet",
        user: user
      };
    }
  } catch (error) {
    console.error("‚ùå Erreur lors du test:", error);
    return {
      success: false,
      message: "Erreur lors du test du workflow",
      error
    };
  }
};

/**
 * Teste la redirection automatique
 */
export const testProfileRedirection = () => {
  console.log("üß™ Test de redirection automatique...");
  console.log("üí° Pour tester la redirection :");
  console.log("1. Connectez-vous avec un utilisateur qui a profileCompleted = false");
  console.log("2. Essayez de naviguer vers n'importe quelle page priv√©e");
  console.log("3. Vous devriez √™tre redirig√© vers /complete-profile");
  console.log("4. Compl√©tez le profil");
  console.log("5. Vous devriez √™tre redirig√© vers /user/profile");
};

/**
 * Simule un utilisateur avec profil incomplet
 */
export const simulateIncompleteProfile = async () => {
  try {
    console.log("üß™ Simulation d'un profil incomplet...");
    
    // Marquer le profil comme incomplet (pour les tests)
    const user = await axiosInstance.get("/auth/me");
    const userId = user.data.data._id;
    
    console.log("‚ö†Ô∏è  Note: Cette fonction ne peut pas vraiment marquer le profil comme incomplet");
    console.log("üí° Pour tester un profil incomplet :");
    console.log("1. Connectez-vous avec un compte Google OAuth nouveau");
    console.log("2. Ou modifiez manuellement la base de donn√©es pour mettre profileCompleted = false");
    
    return {
      success: true,
      message: "Instructions pour simuler un profil incomplet affich√©es",
      userId
    };
  } catch (error) {
    console.error("‚ùå Erreur:", error);
    return {
      success: false,
      message: "Erreur lors de la simulation",
      error
    };
  }
};

// Exposer les fonctions pour tests depuis la console
(window as any).testProfileCompletion = testProfileCompletionWorkflow;
(window as any).testProfileRedirection = testProfileRedirection;
(window as any).simulateIncompleteProfile = simulateIncompleteProfile;