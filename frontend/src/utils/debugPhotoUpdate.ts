/**
 * Guide de debug pour les probl√®mes de mise √† jour de photo
 */

import axiosInstance from "../api/axiosInstance";

/**
 * Fonction de debug compl√®te pour les mises √† jour de photo
 */
export const debugPhotoUpdateIssue = async () => {
  console.log(`
üîç DEBUG: PROBL√àME DE MISE √Ä JOUR DE PHOTO DE PROFIL
================================================================

PROBL√àME RAPPORT√â:
- L'utilisateur change sa photo de profil
- Pas de toast de succ√®s
- Utilisateur d√©connect√© vers page login
- Mais la photo est bien sauvegard√©e

CORRECTIONS APPORT√âES:
1. ‚úÖ Workflow simplifi√©: utilise /users/:id/photo au lieu de upload + update
2. ‚úÖ Toast de succ√®s repositionn√© √† la fin du processus
3. ‚úÖ Intercepteur axios modifi√© pour ne pas rediriger automatiquement
4. ‚úÖ Gestion d'erreurs am√©lior√©e

TESTS √Ä EFFECTUER:
================================================================
  `);

  // Test 1: V√©rifier l'authentification
  console.log("TEST 1: V√©rification de l'authentification...");
  try {
    const authResponse = await axiosInstance.get("/auth/me");
    if (authResponse.data.success) {
      console.log("‚úÖ Utilisateur authentifi√©:", authResponse.data.data.firstName, authResponse.data.data.lastName);
    } else {
      console.log("‚ùå Utilisateur non authentifi√©");
      return;
    }
  } catch (error) {
    console.log("‚ùå Erreur d'authentification:", error.message);
    return;
  }

  // Test 2: V√©rifier l'endpoint de mise √† jour de photo
  console.log("\nTEST 2: Test de l'endpoint /users/:id/photo...");
  try {
    const user = (await axiosInstance.get("/auth/me")).data.data;
    
    // Cr√©er un fichier de test
    const blob = new Blob(['test-debug-photo'], { type: 'image/png' });
    const testFile = new File([blob], 'debug-test.png', { type: 'image/png' });
    
    const formData = new FormData();
    formData.append('file', testFile);
    
    const photoResponse = await axiosInstance.put(`/users/${user._id}/photo`, formData, {
      headers: {
        'Content-Type': 'multipart/form-data',
      },
    });
    
    if (photoResponse.data.success) {
      console.log("‚úÖ Endpoint /users/:id/photo fonctionne:", photoResponse.data.photoUrl);
    } else {
      console.log("‚ùå Probl√®me avec l'endpoint /users/:id/photo");
    }
    
    // V√©rifier que l'utilisateur est toujours authentifi√©
    const authAfter = await axiosInstance.get("/auth/me");
    if (authAfter.data.success) {
      console.log("‚úÖ Utilisateur toujours authentifi√© apr√®s mise √† jour");
    } else {
      console.log("‚ùå PROBL√àME: Utilisateur d√©connect√© apr√®s mise √† jour");
    }
    
  } catch (error) {
    console.log("‚ùå Erreur lors du test endpoint:", error.message);
    
    // V√©rifier si l'erreur a caus√© une d√©connexion
    try {
      const authCheck = await axiosInstance.get("/auth/me");
      if (!authCheck.data.success) {
        console.log("‚ùå CONFIRMED: L'erreur a caus√© une d√©connexion");
      } else {
        console.log("‚úÖ Utilisateur toujours connect√© malgr√© l'erreur");
      }
    } catch (authError) {
      console.log("‚ùå CONFIRMED: Utilisateur d√©connect√©");
    }
  }

  console.log(`
INSTRUCTIONS POUR L'UTILISATEUR:
================================================================

POUR TESTER LA CORRECTION:
1. Ouvrir la console (F12)
2. Ex√©cuter: debugPhotoUpdateIssue()
3. Aller sur la page de profil utilisateur
4. Changer votre photo de profil
5. V√©rifier:
   - ‚úÖ Toast de succ√®s appara√Æt
   - ‚úÖ Vous restez connect√©
   - ‚úÖ Photo mise √† jour visible

SI LE PROBL√àME PERSISTE:
1. V√©rifier les logs de la console
2. Ex√©cuter: quickAuthTest() pour v√©rifier l'auth
3. Ex√©cuter: testPhotoUpdateWorkflow() pour test complet

AUTRES FONCTIONS DE DEBUG DISPONIBLES:
- quickAuthTest() : V√©rification rapide d'authentification
- testPhotoUpdateWorkflow() : Test complet du workflow
- forceUserRefresh() : Force un rafra√Æchissement des donn√©es user
  `);
};

/**
 * Check rapide de l'√©tat du syst√®me
 */
export const systemHealthCheck = async () => {
  console.log("üè• HEALTH CHECK DU SYST√àME...");
  
  const results = {
    auth: false,
    uploadEndpoint: false,
    profileEndpoint: false,
    photoEndpoint: false
  };
  
  // Test auth
  try {
    const authResponse = await axiosInstance.get("/auth/me");
    results.auth = authResponse.data.success;
    console.log("üîê Authentification:", results.auth ? "‚úÖ OK" : "‚ùå NOK");
  } catch (error) {
    console.log("üîê Authentification: ‚ùå ERREUR");
  }
  
  if (!results.auth) {
    console.log("‚ùå Impossible de continuer les tests sans authentification");
    return results;
  }
  
  const user = (await axiosInstance.get("/auth/me")).data.data;
  
  // Test endpoints
  const testFile = new File([new Blob(['test'])], 'test.png', { type: 'image/png' });
  
  // Test upload endpoint
  try {
    const formData = new FormData();
    formData.append('image', testFile);
    const uploadResponse = await axiosInstance.post('/upload/avatar', formData, {
      headers: { 'Content-Type': 'multipart/form-data' }
    });
    results.uploadEndpoint = uploadResponse.data.success;
    console.log("üì§ Upload endpoint:", results.uploadEndpoint ? "‚úÖ OK" : "‚ùå NOK");
  } catch (error) {
    console.log("üì§ Upload endpoint: ‚ùå ERREUR");
  }
  
  // Test profile endpoint
  try {
    const profileResponse = await axiosInstance.put('/profile/update', {
      firstName: user.firstName,
      lastName: user.lastName,
      email: user.email,
      photoUrl: user.photoUrl
    });
    results.profileEndpoint = profileResponse.data.success;
    console.log("üë§ Profile endpoint:", results.profileEndpoint ? "‚úÖ OK" : "‚ùå NOK");
  } catch (error) {
    console.log("üë§ Profile endpoint: ‚ùå ERREUR");
  }
  
  // Test photo endpoint
  try {
    const formData = new FormData();
    formData.append('file', testFile);
    const photoResponse = await axiosInstance.put(`/users/${user._id}/photo`, formData, {
      headers: { 'Content-Type': 'multipart/form-data' }
    });
    results.photoEndpoint = photoResponse.data.success;
    console.log("üì∏ Photo endpoint:", results.photoEndpoint ? "‚úÖ OK" : "‚ùå NOK");
  } catch (error) {
    console.log("üì∏ Photo endpoint: ‚ùå ERREUR");
  }
  
  const allOk = Object.values(results).every(r => r);
  console.log("\nüè• R√âSULTAT GLOBAL:", allOk ? "‚úÖ SYST√àME OK" : "‚ùå PROBL√àMES D√âTECT√âS");
  
  return results;
};

// Exposer les fonctions
(window as any).debugPhotoUpdateIssue = debugPhotoUpdateIssue;
(window as any).systemHealthCheck = systemHealthCheck;

// Importer et exposer le test de correction d'authentification
import { testAuthenticationFix } from './testAuthFix';
(window as any).testAuthenticationFix = testAuthenticationFix;

// Importer et exposer les fonctions de debug pour la boucle infinie
import { debugInfiniteLoop, forceReconnection } from './debugInfiniteLoop';
(window as any).debugInfiniteLoop = debugInfiniteLoop;
(window as any).forceReconnection = forceReconnection;

// Importer et exposer les fonctions de test de synchronisation
import { testUserSync, testSyncForUser } from './testUserSync';
(window as any).testUserSync = testUserSync;
(window as any).testSyncForUser = testSyncForUser;

// Importer et exposer les fonctions de test de synchronisation inter-utilisateur
import { testCrossUserSync, monitorPhotoChanges } from './testCrossUserSync';
(window as any).testCrossUserSync = testCrossUserSync;
(window as any).monitorPhotoChanges = monitorPhotoChanges;

// Importer et exposer le diagnostic rapide
import { quickDiagnostic } from './quickDiagnostic';
(window as any).quickDiagnostic = quickDiagnostic;