#!/bin/bash

# Couleurs
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

echo -e "${BLUE}üöÄ Build Production Frontend - SmartPlanning${NC}"
echo "=================================================="

# V√©rifier que nous sommes dans le bon r√©pertoire
if [ ! -f "package.json" ]; then
    echo -e "${RED}‚ùå Erreur: package.json non trouv√©. Ex√©cutez ce script depuis le dossier frontend.${NC}"
    exit 1
fi

echo -e "\n${YELLOW}üìã √âtapes du Build :${NC}"

# 1. V√©rifier les variables d'environnement
echo -e "\n${BLUE}1. V√©rification des variables d'environnement...${NC}"
if [ -f ".env.production" ]; then
    echo -e "   ‚úÖ Fichier .env.production trouv√©"
    API_URL=$(grep "VITE_API_URL" .env.production | cut -d'=' -f2)
    echo -e "   üìç API URL configur√©e : $API_URL"
    
    # Test de l'API
    if command -v curl >/dev/null 2>&1; then
        echo -e "   üîç Test de l'API..."
        HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" "$API_URL/health" || echo "000")
        if [ "$HTTP_CODE" = "200" ]; then
            echo -e "   ‚úÖ API accessible (200 OK)"
        else
            echo -e "   ‚ö†Ô∏è  API non accessible (Code: $HTTP_CODE)"
            echo -e "   ‚ÑπÔ∏è  Le build continuera, mais v√©rifiez l'URL de l'API"
        fi
    fi
else
    echo -e "   ‚ùå Fichier .env.production manquant"
    echo -e "   ‚ÑπÔ∏è  Cr√©ation du fichier avec l'URL par d√©faut..."
    echo "VITE_API_URL=https://smartplanning-backend.onrender.com/api" > .env.production
    echo "VITE_APP_NAME=SmartPlanning" >> .env.production
    echo "VITE_APP_VERSION=1.0.0" >> .env.production
    echo -e "   ‚úÖ Fichier .env.production cr√©√©"
fi

# 2. Nettoyer le dossier dist
echo -e "\n${BLUE}2. Nettoyage du dossier dist...${NC}"
if [ -d "dist" ]; then
    rm -rf dist
    echo -e "   ‚úÖ Dossier dist supprim√©"
else
    echo -e "   ‚ÑπÔ∏è  Dossier dist n'existe pas"
fi

# 3. V√©rifier que les images sont dans public/images
echo -e "\n${BLUE}3. V√©rification des images...${NC}"
if [ ! -d "public/images" ]; then
    echo -e "   ‚ö†Ô∏è  Dossier public/images manquant, cr√©ation..."
    mkdir -p public/images
fi

# Copier les images depuis src/assets/images si elles n'existent pas dans public
if [ -d "src/assets/images" ]; then
    echo -e "   üìÅ Copie des images depuis src/assets/images..."
    cp -r src/assets/images/* public/images/ 2>/dev/null || true
    echo -e "   ‚úÖ Images copi√©es vers public/images"
fi

# Compter les images
IMAGE_COUNT=$(find public/images -name "*.webp" -o -name "*.png" -o -name "*.jpg" -o -name "*.jpeg" 2>/dev/null | wc -l)
echo -e "   ‚úÖ $IMAGE_COUNT images trouv√©es dans public/images"

# 4. Installation des d√©pendances
echo -e "\n${BLUE}4. Installation des d√©pendances...${NC}"
npm install
if [ $? -eq 0 ]; then
    echo -e "   ‚úÖ D√©pendances install√©es"
else
    echo -e "   ‚ùå Erreur lors de l'installation des d√©pendances"
    exit 1
fi

# 5. Build de production
echo -e "\n${BLUE}5. Build de production...${NC}"
NODE_ENV=production npm run build
if [ $? -eq 0 ]; then
    echo -e "   ‚úÖ Build r√©ussi"
else
    echo -e "   ‚ùå Erreur lors du build"
    exit 1
fi

# 6. V√©rifier que les images sont dans dist
echo -e "\n${BLUE}6. V√©rification du build...${NC}"
if [ -d "dist/images" ]; then
    DIST_IMAGE_COUNT=$(find dist/images -name "*.webp" -o -name "*.png" -o -name "*.jpg" -o -name "*.jpeg" 2>/dev/null | wc -l)
    echo -e "   ‚úÖ $DIST_IMAGE_COUNT images copi√©es dans dist/images"
else
    echo -e "   ‚ùå Dossier dist/images manquant"
fi

# 7. V√©rifier la configuration de l'API dans le build
echo -e "\n${BLUE}7. V√©rification de la configuration API...${NC}"
if [ -f "dist/assets/index-"*.js ]; then
    JS_FILE=$(ls dist/assets/index-*.js | head -n 1)
    if grep -q "smartplanning-backend.onrender.com" "$JS_FILE"; then
        echo -e "   ‚úÖ URL de production d√©tect√©e dans le build"
    elif grep -q "localhost:5050" "$JS_FILE"; then
        echo -e "   ‚ö†Ô∏è  URL localhost d√©tect√©e dans le build"
        echo -e "   ‚ÑπÔ∏è  V√©rifiez que .env.production est correct"
    else
        echo -e "   ‚ÑπÔ∏è  Configuration API non d√©tectable (normal si minifi√©e)"
    fi
fi

# 8. Taille du build
echo -e "\n${BLUE}8. Informations du build :${NC}"
if [ -d "dist" ]; then
    DIST_SIZE=$(du -sh dist | cut -f1)
    echo -e "   üì¶ Taille totale du build : $DIST_SIZE"
    
    if [ -f "dist/index.html" ]; then
        echo -e "   ‚úÖ index.html g√©n√©r√©"
    else
        echo -e "   ‚ùå index.html manquant"
    fi
    
    if [ -d "dist/assets" ]; then
        echo -e "   ‚úÖ Dossier assets g√©n√©r√©"
    else
        echo -e "   ‚ùå Dossier assets manquant"
    fi
fi

echo -e "\n${GREEN}üéØ R√©sum√© :${NC}"
echo -e "‚Ä¢ Variables d'environnement : ‚úÖ V√©rifi√©es"
echo -e "‚Ä¢ Images : ‚úÖ Copi√©es dans public/images et dist/images"
echo -e "‚Ä¢ Build : ‚úÖ G√©n√©r√© dans le dossier dist/"
echo -e "‚Ä¢ API URL : $API_URL"
echo -e "‚Ä¢ Pr√™t pour d√©ploiement : ‚úÖ Hostinger"

echo -e "\n${YELLOW}üì§ Prochaines √©tapes :${NC}"
echo -e "1. Compresser le dossier dist/ en ZIP"
echo -e "2. Se connecter au cPanel Hostinger"
echo -e "3. Uploader et extraire dans public_html/"
echo -e "4. Tester https://smartplanning.fr"

echo -e "\n${GREEN}‚úÖ Build production termin√© avec succ√®s !${NC}" 