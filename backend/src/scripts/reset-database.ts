/**
 * Script de r√©initialisation compl√®te de la base de donn√©es
 * 
 * Ce script supprime toutes les donn√©es de toutes les collections
 * et recr√©e un utilisateur administrateur avec les informations sp√©cifi√©es.
 * 
 * Usage : ts-node src/scripts/reset-database.ts
 */

import chalk from "chalk";
import dotenv from "dotenv";
import mongoose from "mongoose";
import path from "path";
import User from "../models/User.model";
import Company from "../models/Company.model";
import Team from "../models/Team.model";
import WeeklySchedule from "../models/WeeklySchedule.model";
import GeneratedSchedule from "../models/GeneratedSchedule.model";
import VacationRequest from "../models/VacationRequest.model";
import Task from "../models/Task.model";
import Incident from "../models/Incident.model";
import Event from "../models/Event.model";
import ChatbotInteraction from "../models/ChatbotInteraction.model";
import ChatbotSettings from "../models/ChatbotSettings.model";

// Charger les variables d'environnement
dotenv.config({ path: path.resolve(__dirname, "../../.env") });

// Configuration du nouvel admin
const ADMIN_EMAIL = "christophe.mostefaoui.dev@gmail.com";
const ADMIN_PASSWORD = "Mostefaoui2@@";
const ADMIN_FIRSTNAME = "Christophe";
const ADMIN_LASTNAME = "Mostefaoui";

// V√©rifier la pr√©sence de l'URI MongoDB
if (!process.env.MONGODB_URI) {
  console.error(
    chalk.red("‚ùå Erreur: Variable d'environnement MONGODB_URI non d√©finie")
  );
  console.error(chalk.red("Veuillez d√©finir MONGODB_URI dans le fichier .env"));
  process.exit(1);
}

/**
 * Fonction pour vider toutes les collections
 */
async function clearAllCollections(): Promise<void> {
  console.log(chalk.yellow("üóëÔ∏è Suppression de toutes les donn√©es..."));
  
  // Liste des mod√®les √† vider
  const models = [
    { name: "Users", model: User },
    { name: "Companies", model: Company },
    { name: "Teams", model: Team },
    { name: "WeeklySchedules", model: WeeklySchedule },
    { name: "GeneratedSchedules", model: GeneratedSchedule },
    { name: "VacationRequests", model: VacationRequest },
    { name: "Tasks", model: Task },
    { name: "Incidents", model: Incident },
    { name: "Events", model: Event },
    { name: "ChatbotInteractions", model: ChatbotInteraction },
    { name: "ChatbotSettings", model: ChatbotSettings },
  ];

  for (const { name, model } of models) {
    try {
      const result = await (model as any).deleteMany({});
      console.log(chalk.gray(`  - ${name}: ${result.deletedCount} documents supprim√©s`));
    } catch (error) {
      console.log(chalk.gray(`  - ${name}: Collection vide ou erreur`));
    }
  }
  
  console.log(chalk.green("‚úÖ Toutes les donn√©es ont √©t√© supprim√©es"));
}

/**
 * Fonction pour cr√©er l'utilisateur admin
 */
async function createAdminUser(): Promise<void> {
  console.log(chalk.yellow("üë§ Cr√©ation de l'utilisateur administrateur..."));
  
  // V√©rifier si l'utilisateur admin existe d√©j√† (normalement non apr√®s le clear)
  const existingAdmin = await User.findOne({ email: ADMIN_EMAIL });
  
  if (existingAdmin) {
    console.log(
      chalk.yellow(`‚ö†Ô∏è Un utilisateur avec l'email ${ADMIN_EMAIL} existe d√©j√†`)
    );
    return;
  }

  // Cr√©er l'utilisateur admin
  const adminUser = new User({
    firstName: ADMIN_FIRSTNAME,
    lastName: ADMIN_LASTNAME,
    email: ADMIN_EMAIL,
    password: ADMIN_PASSWORD, // Password brut, sera hash√© par le hook pre('save')
    role: "admin",
    status: "active",
    isEmailVerified: true,
  });

  // Sauvegarder l'utilisateur avec le hook de hashage
  await adminUser.save();

  console.log(
    chalk.green(`‚úÖ Utilisateur administrateur cr√©√© avec succ√®s: ${ADMIN_EMAIL}`)
  );
  console.log(chalk.green(`   - Pr√©nom: ${ADMIN_FIRSTNAME}`));
  console.log(chalk.green(`   - Nom: ${ADMIN_LASTNAME}`));
  console.log(chalk.green(`   - R√¥le: admin`));
}

/**
 * Fonction principale de r√©initialisation
 */
async function resetDatabase(): Promise<void> {
  let connection: typeof mongoose | undefined;

  try {
    // Connexion √† MongoDB
    connection = await mongoose.connect(process.env.MONGODB_URI as string);
    console.log(chalk.blue("üîÑ Connexion √† la base de donn√©es √©tablie"));

    // Confirmation de l'action
    console.log(chalk.red("‚ö†Ô∏è  ATTENTION: Cette action va supprimer TOUTES les donn√©es!"));
    console.log(chalk.yellow("üîÑ D√©marrage de la r√©initialisation..."));

    // Vider toutes les collections
    await clearAllCollections();

    // Cr√©er le nouvel utilisateur admin
    await createAdminUser();

    console.log(chalk.green("üéâ R√©initialisation de la base de donn√©es termin√©e avec succ√®s!"));
    
  } catch (error: unknown) {
    console.error(
      chalk.red("‚ùå Erreur lors de la r√©initialisation de la base de donn√©es:"),
      error instanceof Error ? error.message : String(error)
    );
    process.exit(1);
  } finally {
    // Fermer la connexion MongoDB
    if (connection) {
      await mongoose.disconnect();
      console.log(chalk.blue("üîå Connexion √† la base de donn√©es ferm√©e"));
    }
  }
}

// Ex√©cution de la fonction principale
resetDatabase()
  .then(() => {
    process.exit(0);
  })
  .catch((error) => {
    console.error(
      chalk.red("‚ùå Erreur non g√©r√©e:"),
      error instanceof Error ? error.message : String(error)
    );
    process.exit(1);
  });