/**
 * Routes pour la g√©n√©ration automatique de plannings via IA
 *
 * Ce fichier contient les routes permettant :
 * - de g√©n√©rer automatiquement un planning pour une √©quipe via l'API OpenRouter
 * - de traiter les pr√©f√©rences des employ√©s et les contraintes m√©tiers
 * - de sauvegarder les plannings g√©n√©r√©s en base de donn√©es
 */

import { addDays, startOfWeek } from "date-fns";
import dotenv from "dotenv";
import express, { Response } from "express";
import mongoose from "mongoose";
import authenticateToken, { AuthRequest } from "../middlewares/auth.middleware";
import checkRole from "../middlewares/checkRole.middleware";
import { validateRequest } from "../middlewares/validation.middleware";
import EmployeeModel, { IEmployee } from "../models/Employee.model";
import {
  GeneratedScheduleModel,
  IGeneratedSchedule,
} from "../models/GeneratedSchedule.model";
import { TeamModel } from "../models/Team.model";
import WeeklyScheduleModel from "../models/WeeklySchedule.model";
import { planningConstraintsSchema, PlanningConstraints } from "../schemas/planning.schemas";

// Charger les variables d'environnement
dotenv.config();

const router = express.Router();

/**
 * Interface pour le body de la requ√™te de g√©n√©ration de planning
 */
interface GenerateScheduleRequest {
  teamId: string;
  year: number;
  weekNumber: number;
  constraints: string[];
  notes?: string;
}

/**
 * Interface pour la r√©ponse de l'API OpenRouter
 */
interface OpenRouterResponse {
  choices: Array<{
    message: {
      content: string;
      reasoning?: string; // Ajout pour les mod√®les comme Hunyuan qui utilisent reasoning
    };
  }>;
}

/**
 * Interface pour le planning g√©n√©r√© par l'IA
 */
interface GeneratedScheduleData {
  [day: string]: { [employeeName: string]: string[] };
}

/**
 * Interface pour l'interaction conversationnelle avec l'IA
 */
interface ConversationRequest {
  teamId: string;
  year: number;
  weekNumber: number;
  message: string;
  conversationHistory?: Array<{
    role: "user" | "assistant";
    content: string;
    timestamp: Date;
  }>;
}

interface ConversationResponse {
  message: string;
  questions?: string[];
  suggestions?: string[];
  needsMoreInfo: boolean;
  readyToGenerate: boolean;
  conversationHistory: Array<{
    role: "user" | "assistant";
    content: string;
    timestamp: Date;
  }>;
}

/**
 * @route   POST /api/ai/generate-schedule
 * @desc    G√©n√©rer automatiquement un planning pour une √©quipe via l'API OpenRouter
 * @access  Private - Manager, Directeur, Admin uniquement
 */
router.post(
  "/generate-schedule",
  authenticateToken,
  checkRole(["manager", "directeur", "admin"]),
  async (req: AuthRequest, res: Response) => {
    try {
      // üîê Validation de l'utilisateur authentifi√©
      if (!req.user || !req.user._id) {
        return res.status(401).json({
          success: false,
          message: "Utilisateur non authentifi√©",
        });
      }

      // üì• Extraction et validation des donn√©es de la requ√™te
      const {
        teamId,
        year,
        weekNumber,
        constraints,
        notes,
      }: GenerateScheduleRequest = req.body;

      console.log(
        `[AI] G√©n√©ration de planning demand√©e par ${req.user._id} pour l'√©quipe ${teamId}`
      );

      // ‚úÖ Validation des champs obligatoires
      if (
        !teamId ||
        !year ||
        !weekNumber ||
        !constraints ||
        !Array.isArray(constraints)
      ) {
        return res.status(400).json({
          success: false,
          message:
            "Tous les champs obligatoires doivent √™tre fournis : teamId, year, weekNumber, constraints (array)",
        });
      }

      // ‚úÖ Validation des types et valeurs
      if (!mongoose.Types.ObjectId.isValid(teamId)) {
        return res.status(400).json({
          success: false,
          message: "ID d'√©quipe invalide",
        });
      }

      if (year < 2020 || year > 2030) {
        return res.status(400).json({
          success: false,
          message: "L'ann√©e doit √™tre comprise entre 2020 et 2030",
        });
      }

      if (weekNumber < 1 || weekNumber > 53) {
        return res.status(400).json({
          success: false,
          message: "Le num√©ro de semaine doit √™tre compris entre 1 et 53",
        });
      }

      if (constraints.length === 0) {
        return res.status(400).json({
          success: false,
          message: "Au moins une contrainte doit √™tre sp√©cifi√©e",
        });
      }

      // üîç R√©cup√©ration de l'√©quipe avec ses employ√©s
      const team = await TeamModel.findById(teamId)
        .populate("employeeIds")
        .lean();

      if (!team) {
        return res.status(404).json({
          success: false,
          message: "√âquipe introuvable",
        });
      }

      // üîê V√©rification des droits d'acc√®s √† l'√©quipe
      const userIsManager = team.managerIds.some(
        (managerId) => managerId.toString() === req.user._id.toString()
      );
      const userIsDirecteur =
        req.user.role === "directeur" &&
        req.user.companyId === team.companyId?.toString();
      const userIsAdmin = req.user.role === "admin";

      if (!userIsManager && !userIsDirecteur && !userIsAdmin) {
        return res.status(403).json({
          success: false,
          message:
            "Vous n'√™tes pas autoris√© √† g√©n√©rer un planning pour cette √©quipe",
        });
      }

      // üë• R√©cup√©ration des d√©tails des employ√©s
      const employees = team.employeeIds as unknown as IEmployee[];

      if (!employees || employees.length === 0) {
        return res.status(400).json({
          success: false,
          message: "Aucun employ√© trouv√© dans cette √©quipe",
        });
      }

      console.log(
        `[AI] ${employees.length} employ√©s trouv√©s dans l'√©quipe ${team.name}`
      );

      // ü§ñ Construction du prompt pour l'IA
      let employeeDetails = "";
      employees.forEach((employee: IEmployee) => {
        const preferredDays =
          employee.preferences?.preferredDays?.join(", ") ||
          "Aucune pr√©f√©rence sp√©cifi√©e";
        const preferredHours =
          employee.preferences?.preferredHours?.join(", ") ||
          "Aucune pr√©f√©rence sp√©cifi√©e";
        const contractHours = employee.contractHoursPerWeek || "Non sp√©cifi√©";
        const anciennete = employee.startDate
          ? `${
              new Date().getFullYear() -
              new Date(employee.startDate).getFullYear()
            } ans`
          : "Non sp√©cifi√©e";

        employeeDetails += `- ${employee.firstName} ${employee.lastName}:
  * Contrat: ${contractHours}h/semaine (soit ${
          typeof contractHours === "number"
            ? Math.round(contractHours / 5)
            : "N/A"
        }h/jour en moyenne)
  * Jours pr√©f√©r√©s: ${preferredDays}
  * Horaires pr√©f√©r√©s: ${preferredHours}
  * Anciennet√©: ${anciennete}
  * Statut: ${employee.status}
`;
      });

      const constraintsList = constraints
        .map((constraint) => `- ${constraint}`)
        .join("\n");

      // üìÖ Informations contextuelles enrichies
      const weekDate = new Date(year, 0, 1 + (weekNumber - 1) * 7);
      const weekInfo = `Semaine ${weekNumber}/${year} (d√©but: ${weekDate.toLocaleDateString(
        "fr-FR"
      )})`;

      const prompt = `Tu es un expert en planification RH. Cr√©√© un planning hebdomadaire optimis√© et √©quilibr√©.

üìã √âQUIPE "${team.name}" - ${weekInfo}

üë• EMPLOY√âS (${employees.length} personnes):
${employeeDetails}

‚ö†Ô∏è CONTRAINTES OBLIGATOIRES:
${constraintsList}

${notes ? `üìù NOTES SP√âCIALES: ${notes}` : ""}

üéØ OBJECTIFS DE PLANIFICATION:
1. RESPECTER les heures contractuelles de chaque employ√©
2. PRIORISER les pr√©f√©rences d'horaires et de jours
3. ASSURER une r√©partition √©quitable de la charge
4. RESPECTER le repos hebdomadaire l√©gal (minimum 35h cons√©cutives)
5. √âVITER les journ√©es trop longues (maximum 10h/jour)
6. GARANTIR une couverture de service adapt√©e

üîß R√àGLES TECHNIQUES:
- Format horaire: "HH:MM-HH:MM" (ex: "08:00-12:00")
- Pauses d√©jeuner: 1h minimum entre cr√©neaux matin/apr√®s-midi
- Repos quotidien: 11h minimum entre deux services
- Horaires classiques: 7h-19h (adapter selon les pr√©f√©rences)

üí° CONSEILS D'OPTIMISATION:
- Grouper les pr√©f√©rences similaires
- Alterner les √©quipes matin/apr√®s-midi
- Pr√©voir des cr√©neaux de chevauchement pour transmission
- √âquilibrer exp√©rience et nouveaux arrivants

FORMAT ATTENDU (JSON STRICT - pas de texte avant/apr√®s):
{
  "lundi": { 
    "Alice Martin": ["08:00-12:00", "13:00-17:00"],
    "Jean Dupont": ["09:00-13:00"]
  },
  "mardi": { 
    "Alice Martin": ["08:00-12:00"],
    "Jean Dupont": ["14:00-18:00"]
  },
  "mercredi": { 
    "Alice Martin": ["08:00-12:00", "13:00-17:00"],
    "Jean Dupont": []
  },
  "jeudi": { 
    "Alice Martin": ["09:00-13:00"],
    "Jean Dupont": ["14:00-18:00"]
  },
  "vendredi": { 
    "Alice Martin": [],
    "Jean Dupont": ["08:00-12:00", "13:00-17:00"]
  },
  "samedi": {},
  "dimanche": {}
}

‚ö° G√âN√àRE LE PLANNING OPTIMAL EN RESPECTANT TOUTES CES DIRECTIVES.`;

      console.log(`[AI] Envoi du prompt √† OpenRouter...`);

      // üåê Appel √† l'API OpenRouter
      const openRouterApiKey = process.env.OPENROUTER_API_KEY;

      if (!openRouterApiKey) {
        return res.status(500).json({
          success: false,
          message: "Cl√© API OpenRouter non configur√©e",
        });
      }

      const openRouterResponse = await fetch(
        "https://openrouter.ai/api/v1/chat/completions",
        {
          method: "POST",
          headers: {
            Authorization: `Bearer ${openRouterApiKey}`,
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            model: "google/gemini-2.0-flash-exp:free",
            messages: [
              {
                role: "system",
                content: "Tu es un expert en organisation RH. G√©n√®re un planning hebdomadaire clair et √©quilibr√© √† partir de contraintes."
              },
              {
                role: "user",
                content: prompt,
              },
            ],
            temperature: 0.7,
          }),
        }
      );

      if (!openRouterResponse.ok) {
        const errorText = await openRouterResponse.text();
        console.error(
          `[AI] Erreur OpenRouter (${openRouterResponse.status}):`,
          errorText
        );
        return res.status(500).json({
          success: false,
          message: "Erreur lors de l'appel √† l'API OpenRouter",
          error: `Status ${openRouterResponse.status}: ${errorText}`,
        });
      }

      const openRouterData: OpenRouterResponse =
        await openRouterResponse.json();

      if (
        !openRouterData.choices ||
        !openRouterData.choices[0] ||
        !openRouterData.choices[0].message
      ) {
        return res.status(500).json({
          success: false,
          message: "R√©ponse invalide de l'API OpenRouter",
        });
      }

      // G√©rer les mod√®les qui mettent la r√©ponse dans 'reasoning' (comme Hunyuan) ou 'content'
      const aiResponseContent = openRouterData.choices[0].message.content || 
                                openRouterData.choices[0].message.reasoning || 
                                'Erreur: Aucune r√©ponse de l\'IA';
      console.log(`[AI] R√©ponse re√ßue de l'IA:`, aiResponseContent);

      // üìä Parsing de la r√©ponse de l'IA
      let generatedScheduleData: GeneratedScheduleData;

      try {
        // Nettoyer la r√©ponse (enlever les √©ventuels backticks ou texte superflu)
        const cleanedResponse = aiResponseContent
          .replace(/```json|```/g, "")
          .trim();
        generatedScheduleData = JSON.parse(cleanedResponse);
      } catch (parseError) {
        console.error(`[AI] Erreur de parsing JSON:`, parseError);
        return res.status(500).json({
          success: false,
          message: "Impossible de parser la r√©ponse de l'IA",
          error: (parseError as Error).message,
          aiResponse: aiResponseContent,
        });
      }

      // üíæ Sauvegarde des plannings g√©n√©r√©s en base de donn√©es
      console.log(`[AI] Sauvegarde des plannings g√©n√©r√©s...`);

      const savedSchedules: IGeneratedSchedule[] = [];

      // Pour chaque employ√©, cr√©er un document GeneratedSchedule
      for (const employee of employees) {
        const employeeFullName = `${employee.firstName} ${employee.lastName}`;

        // Construire les donn√©es de planning pour cet employ√©
        const employeeScheduleData: { [day: string]: { slots?: string[] } } =
          {};

        // Parcourir chaque jour de la semaine
        const daysOfWeek = [
          "lundi",
          "mardi",
          "mercredi",
          "jeudi",
          "vendredi",
          "samedi",
          "dimanche",
        ];

        for (const day of daysOfWeek) {
          if (
            generatedScheduleData[day] &&
            generatedScheduleData[day][employeeFullName] &&
            generatedScheduleData[day][employeeFullName].length > 0
          ) {
            // Transformer les cr√©neaux de l'IA en format compatible avec le frontend
            employeeScheduleData[day] = {
              slots: generatedScheduleData[day][employeeFullName],
            };
          } else {
            // Jour sans horaires = repos
            employeeScheduleData[day] = {};
          }
        }

        // Cr√©er le document GeneratedSchedule pour cet employ√©
        const generatedSchedule = new GeneratedScheduleModel({
          employeeId: (employee as any)._id || employee.userId,
          scheduleData: new Map(Object.entries(employeeScheduleData)),
          generatedBy: req.user._id,
          timestamp: new Date(),
          status: "draft",
          weekNumber: weekNumber,
          year: year,
        });

        const savedSchedule = await generatedSchedule.save();
        savedSchedules.push(savedSchedule);

        console.log(
          `[AI] Planning sauvegard√© pour ${employeeFullName} (ID: ${savedSchedule._id})`
        );
      }

      // ‚úÖ R√©ponse de succ√®s avec les donn√©es sauvegard√©es
      return res.status(201).json({
        success: true,
        message: `Planning g√©n√©r√© avec succ√®s pour ${employees.length} employ√©s de l'√©quipe ${team.name}`,
        data: {
          teamId: team._id,
          teamName: team.name,
          weekNumber,
          year,
          employeesCount: employees.length,
          generatedSchedules: savedSchedules.map((schedule) => ({
            id: (schedule as any)._id,
            employeeId: schedule.employeeId,
            status: schedule.status,
            timestamp: schedule.timestamp,
          })),
          rawScheduleData: generatedScheduleData,
        },
      });
    } catch (error) {
      // ‚ö†Ô∏è Gestion globale des erreurs
      console.error("[AI] Erreur lors de la g√©n√©ration du planning:", error);
      return res.status(500).json({
        success: false,
        message: "Erreur serveur lors de la g√©n√©ration du planning",
        error: error instanceof Error ? error.message : String(error),
      });
    }
  }
);

/**
 * @route   GET /api/ai/generated-schedules
 * @desc    R√©cup√©rer tous les plannings IA avec le statut "draft"
 * @access  Private - Manager, Directeur, Admin uniquement
 */
router.get(
  "/generated-schedules",
  authenticateToken,
  checkRole(["manager", "directeur", "admin"]),
  async (req: AuthRequest, res: Response) => {
    try {
      // üîê Validation de l'utilisateur authentifi√©
      if (!req.user || !req.user._id) {
        console.log('‚ùå [AI API] Utilisateur non authentifi√©');
        return res.status(401).json({
          success: false,
          message: "Utilisateur non authentifi√©",
        });
      }

      console.log(
        `[AI] R√©cup√©ration des plannings g√©n√©r√©s par ${req.user._id} (${req.user.role})`
      );
      console.log(`[AI] Param√®tres de la requ√™te:`, req.query);
      console.log(`[AI] User companyId:`, req.user.companyId);
      console.log(`[AI] User role:`, req.user.role);

      // üîç Construction de la requ√™te selon le r√¥le
      let query: any = { status: "draft" };
      
      console.log(`[AI] Requ√™te initiale:`, query);

      if (req.user.role === "manager") {
        // Manager : seulement les plannings des √©quipes qu'il g√®re
        const managedTeams = await TeamModel.find({
          managerIds: req.user._id,
        }).select("_id");

        const teamIds = managedTeams.map((team) => team._id);

        if (teamIds.length === 0) {
          return res.status(200).json({
            success: true,
            data: [],
            message: "Aucune √©quipe g√©r√©e trouv√©e",
          });
        }

        // R√©cup√©rer les employ√©s de ces √©quipes
        const teamsWithEmployees = await TeamModel.find({
          _id: { $in: teamIds },
        }).select("employeeIds");

        const employeeIds: any[] = [];
        teamsWithEmployees.forEach((team) => {
          if (team.employeeIds && team.employeeIds.length > 0) {
            employeeIds.push(...team.employeeIds);
          }
        });

        // Utiliser directement les IDs des employ√©s sans populate
        query.employeeId = { $in: employeeIds };
        console.log(`[AI] Requ√™te manager - employeeIds trouv√©s:`, employeeIds.length);
      } else if (req.user.role === "directeur") {
        // Directeur : seulement les plannings des √©quipes de sa soci√©t√©
        const companyTeams = await TeamModel.find({
          companyId: req.user.companyId,
        }).select("employeeIds");

        const employeeIds: any[] = [];
        companyTeams.forEach((team) => {
          if (team.employeeIds && team.employeeIds.length > 0) {
            employeeIds.push(...team.employeeIds);
          }
        });

        if (employeeIds.length === 0) {
          return res.status(200).json({
            success: true,
            data: [],
            message: "Aucun employ√© trouv√© dans votre soci√©t√©",
          });
        }

        // Utiliser directement les IDs des employ√©s sans populate
        query.employeeId = { $in: employeeIds };
        console.log(`[AI] Requ√™te directeur - employeeIds trouv√©s:`, employeeIds.length);
      }
      // Admin : pas de filtre suppl√©mentaire, tous les plannings

      // üìä R√©cup√©ration des plannings avec population des donn√©es
      const generatedSchedules = await GeneratedScheduleModel.find(query)
        .populate({
          path: "employeeId",
          select: "firstName lastName email photoUrl",
        })
        .populate({
          path: "generatedBy",
          select: "firstName lastName",
        })
        .sort({ timestamp: -1 });

      // üè¢ Enrichissement avec les donn√©es d'√©quipe
      const enrichedSchedules = await Promise.all(
        generatedSchedules.map(async (schedule) => {
          // ‚úÖ Conversion robuste MongoDB Map -> Objet JavaScript
          const scheduleDataObject: any = {};

          if (schedule.scheduleData instanceof Map) {
            for (const [day, data] of schedule.scheduleData.entries()) {
              // ‚úÖ Extraire seulement les vraies donn√©es (pas les propri√©t√©s Mongoose)
              const dataAny = data as any;
              scheduleDataObject[day] =
                dataAny && typeof dataAny.toObject === "function"
                  ? dataAny.toObject()
                  : dataAny && dataAny._doc
                  ? dataAny._doc
                  : dataAny;
            }
          } else if (
            schedule.scheduleData &&
            typeof schedule.scheduleData === "object"
          ) {
            // Conversion manuelle pour s'assurer du bon format
            for (const [day, data] of Object.entries(schedule.scheduleData)) {
              const dataAny = data as any;
              scheduleDataObject[day] =
                dataAny && typeof dataAny.toObject === "function"
                  ? dataAny.toObject()
                  : dataAny && dataAny._doc
                  ? dataAny._doc
                  : dataAny;
            }
          }

          // ‚úÖ Mapping fran√ßais -> anglais pour compatibilit√© frontend
          const dayMapping = {
            lundi: "monday",
            mardi: "tuesday",
            mercredi: "wednesday",
            jeudi: "thursday",
            vendredi: "friday",
            samedi: "saturday",
            dimanche: "sunday",
          };

          const frontendScheduleData: any = {};
          for (const [frenchDay, data] of Object.entries(scheduleDataObject)) {
            const englishDay =
              dayMapping[frenchDay as keyof typeof dayMapping] || frenchDay;
            frontendScheduleData[englishDay] = data;
          }

          // Trouver l'√©quipe de l'employ√©
          const team = await TeamModel.findOne({
            employeeIds: schedule.employeeId,
          }).select("name _id");

          return {
            _id: schedule._id.toString(),
            employeeId: schedule.employeeId,
            scheduleData: frontendScheduleData,
            status: schedule.status,
            timestamp: schedule.timestamp,
            generatedBy: schedule.generatedBy,
            employee: schedule.employeeId,
            teamId: team?._id,
            teamName: team?.name || "√âquipe non trouv√©e",
            constraints: [],
            notes: "",
            weekNumber: schedule.weekNumber || 1,
            year: schedule.year || new Date().getFullYear(),
          };
        })
      );

      console.log(`[AI] ${enrichedSchedules.length} plannings trouv√©s`);
      console.log(`[AI] Requ√™te finale utilis√©e:`, JSON.stringify(query, null, 2));
      
      // Log d√©taill√© des premiers plannings
      if (enrichedSchedules.length > 0) {
        console.log(`[AI] Premier planning enrichi:`, JSON.stringify(enrichedSchedules[0], null, 2));
      }

      return res.status(200).json({
        success: true,
        data: enrichedSchedules,
        count: enrichedSchedules.length,
      });
    } catch (error) {
      console.error(
        "[AI] Erreur lors de la r√©cup√©ration des plannings:",
        error
      );
      return res.status(500).json({
        success: false,
        message: "Erreur serveur lors de la r√©cup√©ration des plannings",
        error: error instanceof Error ? error.message : String(error),
      });
    }
  }
);

/**
 * @route   PATCH /api/ai/generated-schedules/:id
 * @desc    Mettre √† jour le scheduleData d'un planning IA
 * @access  Private - Manager, Directeur, Admin uniquement
 */
router.patch(
  "/generated-schedules/:id",
  authenticateToken,
  checkRole(["manager", "directeur", "admin"]),
  async (req: AuthRequest, res: Response) => {
    try {
      // üîê Validation de l'utilisateur authentifi√©
      if (!req.user || !req.user._id) {
        return res.status(401).json({
          success: false,
          message: "Utilisateur non authentifi√©",
        });
      }

      const { id } = req.params;
      const { scheduleData } = req.body;

      // ‚úÖ Validation des param√®tres
      if (!mongoose.Types.ObjectId.isValid(id)) {
        return res.status(400).json({
          success: false,
          message: "ID de planning invalide",
        });
      }

      if (!scheduleData || typeof scheduleData !== "object") {
        return res.status(400).json({
          success: false,
          message: "Donn√©es de planning (scheduleData) manquantes ou invalides",
        });
      }

      console.log(`[AI] Mise √† jour du planning ${id} par ${req.user._id}`);

      // üîç R√©cup√©ration du planning existant
      const existingSchedule = await GeneratedScheduleModel.findById(id)
        .populate("employeeId")
        .lean();

      if (!existingSchedule) {
        return res.status(404).json({
          success: false,
          message: "Planning g√©n√©r√© introuvable",
        });
      }

      // üîê V√©rification des droits d'acc√®s
      if (req.user.role !== "admin") {
        // Trouver l'√©quipe de l'employ√©
        const team = await TeamModel.findOne({
          employeeIds: existingSchedule.employeeId,
        });

        if (!team) {
          return res.status(404).json({
            success: false,
            message: "√âquipe de l'employ√© introuvable",
          });
        }

        const userIsManager = team.managerIds.some(
          (managerId) => managerId.toString() === req.user._id.toString()
        );
        const userIsDirecteur =
          req.user.role === "directeur" &&
          req.user.companyId === team.companyId?.toString();

        if (!userIsManager && !userIsDirecteur) {
          return res.status(403).json({
            success: false,
            message: "Vous n'√™tes pas autoris√© √† modifier ce planning",
          });
        }
      }

      // üíæ Mise √† jour du planning
      const updatedSchedule = await GeneratedScheduleModel.findByIdAndUpdate(
        id,
        {
          scheduleData,
          updatedAt: new Date(),
        },
        { new: true }
      ).populate("employeeId", "firstName lastName email");

      console.log(`[AI] Planning ${id} mis √† jour avec succ√®s`);

      return res.status(200).json({
        success: true,
        data: updatedSchedule,
        message: "Planning mis √† jour avec succ√®s",
      });
    } catch (error) {
      console.error("[AI] Erreur lors de la mise √† jour du planning:", error);
      return res.status(500).json({
        success: false,
        message: "Erreur serveur lors de la mise √† jour du planning",
        error: error instanceof Error ? error.message : String(error),
      });
    }
  }
);

/**
 * @route   PATCH /api/ai/generated-schedules/:id/validate
 * @desc    Valider un planning IA (passer status √† "approved")
 * @access  Private - Manager, Directeur, Admin uniquement
 */
router.patch(
  "/generated-schedules/:id/validate",
  authenticateToken,
  checkRole(["manager", "directeur", "admin"]),
  async (req: AuthRequest, res: Response) => {
    try {
      // üîê Validation de l'utilisateur authentifi√©
      if (!req.user || !req.user._id) {
        return res.status(401).json({
          success: false,
          message: "Utilisateur non authentifi√©",
        });
      }

      const { id } = req.params;
      const { validatedBy } = req.body;

      // ‚úÖ Validation des param√®tres
      if (!mongoose.Types.ObjectId.isValid(id)) {
        return res.status(400).json({
          success: false,
          message: "ID de planning invalide",
        });
      }

      if (!validatedBy || !mongoose.Types.ObjectId.isValid(validatedBy)) {
        return res.status(400).json({
          success: false,
          message: "ID du validateur manquant ou invalide",
        });
      }

      console.log(`[AI] Validation du planning ${id} par ${req.user._id}`);

      // üîç R√©cup√©ration du planning existant
      const existingSchedule = await GeneratedScheduleModel.findById(id)
        .populate("employeeId")
        .lean();

      if (!existingSchedule) {
        return res.status(404).json({
          success: false,
          message: "Planning g√©n√©r√© introuvable",
        });
      }

      if (existingSchedule.status !== "draft") {
        return res.status(400).json({
          success: false,
          message: "Seuls les plannings en brouillon peuvent √™tre valid√©s",
        });
      }

      // üîê V√©rification des droits d'acc√®s (m√™me logique que pour la mise √† jour)
      if (req.user.role !== "admin") {
        const team = await TeamModel.findOne({
          employeeIds: existingSchedule.employeeId,
        });

        if (!team) {
          return res.status(404).json({
            success: false,
            message: "√âquipe de l'employ√© introuvable",
          });
        }

        const userIsManager = team.managerIds.some(
          (managerId) => managerId.toString() === req.user._id.toString()
        );
        const userIsDirecteur =
          req.user.role === "directeur" &&
          req.user.companyId === team.companyId?.toString();

        if (!userIsManager && !userIsDirecteur) {
          return res.status(403).json({
            success: false,
            message: "Vous n'√™tes pas autoris√© √† valider ce planning",
          });
        }
      }

      // ‚úÖ Validation du planning - Cr√©er un WeeklySchedule et supprimer le GeneratedSchedule
      console.log(`[AI] Cr√©ation du planning hebdomadaire pour validation...`);

      // üìä Convertir les donn√©es de planning et calculer le total des minutes
      const scheduleDataMap = new Map<string, string[]>();
      let totalWeeklyMinutes = 0;

      // ‚úÖ Mapping fran√ßais -> anglais pour compatibilit√© avec WeeklySchedule
      const dayMapping = {
        lundi: "monday",
        mardi: "tuesday",
        mercredi: "wednesday",
        jeudi: "thursday",
        vendredi: "friday",
        samedi: "saturday",
        dimanche: "sunday",
      };

      if (existingSchedule.scheduleData instanceof Map) {
        for (const [day, data] of existingSchedule.scheduleData.entries()) {
          const slots = (data as any)?.slots || [];

          // Convertir la cl√© fran√ßaise en anglaise
          const englishDay = dayMapping[day as keyof typeof dayMapping] || day;
          scheduleDataMap.set(englishDay, slots);

          // Calculer les minutes pour ce jour
          slots.forEach((slot: string) => {
            const [start, end] = slot.split("-");
            if (start && end) {
              const [startH, startM] = start.split(":").map(Number);
              const [endH, endM] = end.split(":").map(Number);
              const minutes = endH * 60 + endM - (startH * 60 + startM);
              totalWeeklyMinutes += minutes;
            }
          });
        }
      } else {
        // Si ce n'est pas une Map, convertir l'objet
        for (const [day, data] of Object.entries(
          existingSchedule.scheduleData || {}
        )) {
          const slots = (data as any)?.slots || [];

          // Convertir la cl√© fran√ßaise en anglaise
          const englishDay = dayMapping[day as keyof typeof dayMapping] || day;
          scheduleDataMap.set(englishDay, slots);

          // Calculer les minutes pour ce jour
          slots.forEach((slot: string) => {
            const [start, end] = slot.split("-");
            if (start && end) {
              const [startH, startM] = start.split(":").map(Number);
              const [endH, endM] = end.split(":").map(Number);
              const minutes = endH * 60 + endM - (startH * 60 + startM);
              totalWeeklyMinutes += minutes;
            }
          });
        }
      }

      // üóìÔ∏è Calculer les dates quotidiennes de la semaine avec les cl√©s anglaises
      const dailyDates = new Map<string, Date>();
      if (existingSchedule.weekNumber && existingSchedule.year) {
        // Utiliser date-fns pour calculer le d√©but de la semaine
        const yearStart = new Date(existingSchedule.year, 0, 1);
        const firstWeekStart = startOfWeek(yearStart, { weekStartsOn: 1 });
        const targetWeekStart = addDays(
          firstWeekStart,
          (existingSchedule.weekNumber - 1) * 7
        );

        const dayNames = [
          "monday",
          "tuesday",
          "wednesday",
          "thursday",
          "friday",
          "saturday",
          "sunday",
        ];
        dayNames.forEach((day, index) => {
          const dayDate = addDays(targetWeekStart, index);
          dailyDates.set(day, dayDate);
        });
      } else {
        // Fallback : utiliser la semaine actuelle
        const now = new Date();
        const weekStart = startOfWeek(now, { weekStartsOn: 1 });
        const dayNames = [
          "monday",
          "tuesday",
          "wednesday",
          "thursday",
          "friday",
          "saturday",
          "sunday",
        ];
        dayNames.forEach((day, index) => {
          const dayDate = addDays(weekStart, index);
          dailyDates.set(day, dayDate);
        });
      }

      // üÜï Cr√©er le planning hebdomadaire
      const weeklySchedule = new WeeklyScheduleModel({
        employeeId: existingSchedule.employeeId,
        year: existingSchedule.year || new Date().getFullYear(),
        weekNumber: existingSchedule.weekNumber || 1,
        scheduleData: scheduleDataMap,
        status: "approved",
        updatedBy: validatedBy,
        notes: "", // Notes vides par d√©faut
        dailyDates: dailyDates,
        totalWeeklyMinutes: totalWeeklyMinutes,
      });

      const savedWeeklySchedule = await weeklySchedule.save();

      // üóëÔ∏è Supprimer le planning g√©n√©r√© de la collection GeneratedSchedule
      await GeneratedScheduleModel.findByIdAndDelete(id);

      console.log(
        `[AI] Planning ${id} valid√© et transf√©r√© vers WeeklySchedule (${savedWeeklySchedule._id})`
      );

      return res.status(200).json({
        success: true,
        data: {
          weeklySchedule: savedWeeklySchedule,
          message: "Planning valid√© et cr√©√© avec succ√®s",
        },
        message: "Planning valid√© avec succ√®s",
      });
    } catch (error) {
      console.error("[AI] Erreur lors de la validation du planning:", error);
      return res.status(500).json({
        success: false,
        message: "Erreur serveur lors de la validation du planning",
        error: error instanceof Error ? error.message : String(error),
      });
    }
  }
);

/**
 * @route   PATCH /api/ai/generated-schedules/:id/reject
 * @desc    Refuser un planning IA (passer status √† "rejected")
 * @access  Private - Manager, Directeur, Admin uniquement
 */
router.patch(
  "/generated-schedules/:id/reject",
  authenticateToken,
  checkRole(["manager", "directeur", "admin"]),
  async (req: AuthRequest, res: Response) => {
    try {
      // üîê Validation de l'utilisateur authentifi√©
      if (!req.user || !req.user._id) {
        return res.status(401).json({
          success: false,
          message: "Utilisateur non authentifi√©",
        });
      }

      const { id } = req.params;
      const { validatedBy } = req.body;

      // ‚úÖ Validation des param√®tres
      if (!mongoose.Types.ObjectId.isValid(id)) {
        return res.status(400).json({
          success: false,
          message: "ID de planning invalide",
        });
      }

      if (!validatedBy || !mongoose.Types.ObjectId.isValid(validatedBy)) {
        return res.status(400).json({
          success: false,
          message: "ID du validateur manquant ou invalide",
        });
      }

      console.log(`[AI] Refus du planning ${id} par ${req.user._id}`);

      // üîç R√©cup√©ration du planning existant
      const existingSchedule = await GeneratedScheduleModel.findById(id)
        .populate("employeeId")
        .lean();

      if (!existingSchedule) {
        return res.status(404).json({
          success: false,
          message: "Planning g√©n√©r√© introuvable",
        });
      }

      if (existingSchedule.status !== "draft") {
        return res.status(400).json({
          success: false,
          message: "Seuls les plannings en brouillon peuvent √™tre refus√©s",
        });
      }

      // üîê V√©rification des droits d'acc√®s (m√™me logique que pour la validation)
      if (req.user.role !== "admin") {
        const team = await TeamModel.findOne({
          employeeIds: existingSchedule.employeeId,
        });

        if (!team) {
          return res.status(404).json({
            success: false,
            message: "√âquipe de l'employ√© introuvable",
          });
        }

        const userIsManager = team.managerIds.some(
          (managerId) => managerId.toString() === req.user._id.toString()
        );
        const userIsDirecteur =
          req.user.role === "directeur" &&
          req.user.companyId === team.companyId?.toString();

        if (!userIsManager && !userIsDirecteur) {
          return res.status(403).json({
            success: false,
            message: "Vous n'√™tes pas autoris√© √† refuser ce planning",
          });
        }
      }

      // ‚ùå Refus du planning - Suppression d√©finitive
      await GeneratedScheduleModel.findByIdAndDelete(id);

      console.log(`[AI] Planning ${id} refus√© et supprim√© d√©finitivement`);

      return res.status(200).json({
        success: true,
        data: {
          deletedScheduleId: id,
          employeeName: `${(existingSchedule.employeeId as any).firstName} ${
            (existingSchedule.employeeId as any).lastName
          }`,
        },
        message: "Planning refus√© et supprim√© d√©finitivement",
      });
    } catch (error) {
      console.error("[AI] Erreur lors du refus du planning:", error);
      return res.status(500).json({
        success: false,
        message: "Erreur serveur lors du refus du planning",
        error: error instanceof Error ? error.message : String(error),
      });
    }
  }
);

/**
 * @route   POST /api/ai/conversation
 * @desc    Interaction conversationnelle avec l'IA pour clarifier les besoins de planning
 * @access  Private - Manager, Directeur, Admin uniquement
 */
router.post(
  "/conversation",
  authenticateToken,
  checkRole(["manager", "directeur", "admin"]),
  async (req: AuthRequest, res: Response) => {
    try {
      // üîê Validation de l'utilisateur authentifi√©
      if (!req.user || !req.user._id) {
        return res.status(401).json({
          success: false,
          message: "Utilisateur non authentifi√©",
        });
      }

      const {
        teamId,
        year,
        weekNumber,
        message,
        conversationHistory = [],
      }: ConversationRequest = req.body;

      console.log(
        `[AI Conversation] Nouvelle interaction pour l'√©quipe ${teamId} par ${req.user._id}`
      );

      // ‚úÖ Validation des champs obligatoires
      if (!teamId || !year || !weekNumber || !message) {
        return res.status(400).json({
          success: false,
          message:
            "Tous les champs obligatoires doivent √™tre fournis : teamId, year, weekNumber, message",
        });
      }

      // üîç R√©cup√©ration de l'√©quipe avec ses employ√©s
      const team = await TeamModel.findById(teamId)
        .populate("employeeIds")
        .lean();

      if (!team) {
        return res.status(404).json({
          success: false,
          message: "√âquipe introuvable",
        });
      }

      // üîê V√©rification des droits d'acc√®s √† l'√©quipe
      const userIsManager = team.managerIds.some(
        (managerId) => managerId.toString() === req.user._id.toString()
      );
      const userIsDirecteur =
        req.user.role === "directeur" &&
        req.user.companyId === team.companyId?.toString();
      const userIsAdmin = req.user.role === "admin";

      if (!userIsManager && !userIsDirecteur && !userIsAdmin) {
        return res.status(403).json({
          success: false,
          message:
            "Vous n'√™tes pas autoris√© √† interagir avec l'IA pour cette √©quipe",
        });
      }

      const employees = team.employeeIds as unknown as IEmployee[];

      if (!employees || employees.length === 0) {
        return res.status(400).json({
          success: false,
          message: "Aucun employ√© trouv√© dans cette √©quipe",
        });
      }

      // üß† Construction du contexte enrichi pour l'IA
      let employeeDetails = "";
      employees.forEach((employee: IEmployee) => {
        const preferredDays =
          employee.preferences?.preferredDays?.join(", ") ||
          "Aucune pr√©f√©rence sp√©cifi√©e";
        const preferredHours =
          employee.preferences?.preferredHours?.join(", ") ||
          "Aucune pr√©f√©rence sp√©cifi√©e";
        const contractHours = employee.contractHoursPerWeek || "Non sp√©cifi√©";
        const anciennete = employee.startDate
          ? `${
              new Date().getFullYear() -
              new Date(employee.startDate).getFullYear()
            } ans`
          : "Non sp√©cifi√©e";

        employeeDetails += `- ${employee.firstName} ${employee.lastName}:
  * Contrat: ${contractHours}h/semaine (soit ${
          typeof contractHours === "number"
            ? Math.round(contractHours / 5)
            : "N/A"
        }h/jour en moyenne)
  * Jours pr√©f√©r√©s: ${preferredDays}
  * Horaires pr√©f√©r√©s: ${preferredHours}
  * Anciennet√©: ${anciennete}
  * Statut: ${employee.status}
`;
      });

      // üìÖ Informations contextuelles de la semaine
      const weekDate = new Date(year, 0, 1 + (weekNumber - 1) * 7);
      const weekInfo = `Semaine ${weekNumber}/${year} (${weekDate.toLocaleDateString(
        "fr-FR"
      )})`;

      // üí¨ Historique de conversation pour contexte
      const historyContext =
        conversationHistory.length > 0
          ? conversationHistory
              .map(
                (entry) =>
                  `${entry.role === "user" ? "Manager" : "Assistant"}: ${
                    entry.content
                  }`
              )
              .join("\n")
          : "Premi√®re interaction";

      const conversationPrompt = `Tu es un assistant RH expert en planification d'√©quipes. Tu dois aider un manager √† cr√©er le planning optimal pour son √©quipe.

CONTEXTE DE L'√âQUIPE "${team.name}" :
${employeeDetails}

P√âRIODE CONCERN√âE : ${weekInfo}

HISTORIQUE DE LA CONVERSATION :
${historyContext}

NOUVEAU MESSAGE DU MANAGER : "${message}"

INSTRUCTIONS :
1. Si c'est la premi√®re interaction, pr√©sente-toi et r√©capitule ce que tu comprends de l'√©quipe
2. Pose des questions pertinentes pour clarifier les besoins sp√©cifiques
3. Identifie les contraintes manquantes ou ambigu√´s
4. Sugg√®re des optimisations bas√©es sur les pr√©f√©rences des employ√©s
5. Quand tu as assez d'informations, propose de g√©n√©rer le planning

QUESTIONS √Ä CONSID√âRER :
- Horaires d'ouverture/fermeture du service ?
- Charge de travail attendue pour cette semaine ?
- √âv√©nements particuliers (cong√©s, formations, r√©unions) ?
- Contraintes l√©gales (repos hebdomadaire, temps de pause) ?
- Pr√©f√©rences manag√©riales sp√©cifiques ?
- Besoin de couverture minimum par cr√©neau ?

R√âPONDS en fran√ßais de mani√®re conversationnelle et professionnelle. Sois pr√©cis et orient√© solutions.

FORMAT DE R√âPONSE :
{
  "message": "Ta r√©ponse conversationnelle ici",
  "questions": ["Question 1 ?", "Question 2 ?"],
  "suggestions": ["Suggestion 1", "Suggestion 2"],
  "needsMoreInfo": true/false,
  "readyToGenerate": true/false
}`;

      // üåê Appel √† l'API OpenRouter pour la conversation
      const openRouterApiKey = process.env.OPENROUTER_API_KEY;

      if (!openRouterApiKey) {
        return res.status(500).json({
          success: false,
          message: "Cl√© API OpenRouter non configur√©e",
        });
      }

      const openRouterResponse = await fetch(
        "https://openrouter.ai/api/v1/chat/completions",
        {
          method: "POST",
          headers: {
            Authorization: `Bearer ${openRouterApiKey}`,
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            model: "google/gemini-2.0-flash-exp:free",
            messages: [
              {
                role: "system",
                content: "Tu es un expert en organisation RH. G√©n√®re un planning hebdomadaire clair et √©quilibr√© √† partir de contraintes."
              },
              {
                role: "user",
                content: conversationPrompt,
              },
            ],
            temperature: 0.8,
          }),
        }
      );

      if (!openRouterResponse.ok) {
        const errorText = await openRouterResponse.text();
        console.error(`[AI Conversation] Erreur OpenRouter:`, errorText);
        return res.status(500).json({
          success: false,
          message: "Erreur lors de l'appel √† l'API OpenRouter",
        });
      }

      const openRouterData: OpenRouterResponse =
        await openRouterResponse.json();
      // G√©rer les mod√®les qui mettent la r√©ponse dans 'reasoning' (comme Hunyuan) ou 'content'
      const aiResponseContent = openRouterData.choices[0].message.content || 
                                openRouterData.choices[0].message.reasoning || 
                                'Erreur: Aucune r√©ponse de l\'IA';

      // üìä Parsing de la r√©ponse conversationnelle
      let conversationResponse: ConversationResponse;

      try {
        const cleanedResponse = aiResponseContent
          .replace(/```json|```/g, "")
          .trim();

        const parsedResponse = JSON.parse(cleanedResponse);

        // Mettre √† jour l'historique de conversation
        const updatedHistory = [
          ...conversationHistory,
          {
            role: "user" as const,
            content: message,
            timestamp: new Date(),
          },
          {
            role: "assistant" as const,
            content: parsedResponse.message,
            timestamp: new Date(),
          },
        ];

        conversationResponse = {
          message: parsedResponse.message,
          questions: parsedResponse.questions || [],
          suggestions: parsedResponse.suggestions || [],
          needsMoreInfo: parsedResponse.needsMoreInfo !== false,
          readyToGenerate: parsedResponse.readyToGenerate === true,
          conversationHistory: updatedHistory,
        };
      } catch (parseError) {
        console.error(`[AI Conversation] Erreur de parsing:`, parseError);

        // Fallback : r√©ponse directe sans JSON
        const updatedHistory = [
          ...conversationHistory,
          {
            role: "user" as const,
            content: message,
            timestamp: new Date(),
          },
          {
            role: "assistant" as const,
            content: aiResponseContent,
            timestamp: new Date(),
          },
        ];

        conversationResponse = {
          message: aiResponseContent,
          questions: [],
          suggestions: [],
          needsMoreInfo: true,
          readyToGenerate: false,
          conversationHistory: updatedHistory,
        };
      }

      console.log(
        `[AI Conversation] R√©ponse g√©n√©r√©e pour l'√©quipe ${team.name}`
      );

      return res.status(200).json({
        success: true,
        data: conversationResponse,
        teamInfo: {
          name: team.name,
          employeeCount: employees.length,
          week: weekInfo,
        },
      });
    } catch (error) {
      console.error("[AI Conversation] Erreur:", error);
      return res.status(500).json({
        success: false,
        message: "Erreur serveur lors de l'interaction avec l'IA",
        error: error instanceof Error ? error.message : String(error),
      });
    }
  }
);

// Fonction utilitaire pour calculer les dates de la semaine
function getWeekDateRange(weekNumber: number, year: number) {
  const firstDayOfYear = new Date(year, 0, 1);
  const daysOffset = (weekNumber - 1) * 7;
  const mondayOfWeek = new Date(firstDayOfYear.getTime() + daysOffset * 24 * 60 * 60 * 1000);
  
  // Ajuster pour que Monday soit le premier jour de la semaine
  const dayOfWeek = mondayOfWeek.getDay();
  const mondayOffset = dayOfWeek === 0 ? -6 : 1 - dayOfWeek;
  mondayOfWeek.setDate(mondayOfWeek.getDate() + mondayOffset);
  
  const sundayOfWeek = new Date(mondayOfWeek.getTime() + 6 * 24 * 60 * 60 * 1000);
  
  return {
    start: mondayOfWeek,
    end: sundayOfWeek
  };
}

/**
 * @route   POST /api/ai/schedule/generate-from-constraints
 * @desc    G√©n√©rer un planning avec les contraintes du wizard
 * @access  Private - Manager, Directeur, Admin uniquement
 */
router.post(
  "/schedule/generate-from-constraints",
  authenticateToken,
  checkRole(["manager", "directeur", "admin"]),
  validateRequest({ 
    body: planningConstraintsSchema,
    schemaName: 'planning.constraints' 
  }),
  async (req: AuthRequest, res: Response) => {
    console.log('üöÄ [AI GENERATION] D√©but de la requ√™te de g√©n√©ration');
    console.log('üë§ [AI GENERATION] Utilisateur:', req.user ? req.user._id : 'NON D√âFINI');
    console.log('üìä [AI GENERATION] Body de la requ√™te:', JSON.stringify(req.body, null, 2));
    
    try {
      console.log('‚úÖ [AI GENERATION] Entr√©e dans le try-catch principal');
      
      // üîê Validation de l'utilisateur authentifi√©
      if (!req.user || !req.user._id) {
        console.log('‚ùå [AI GENERATION] Utilisateur non authentifi√©');
        return res.status(401).json({
          success: false,
          message: "Utilisateur non authentifi√©",
        });
      }
      
      console.log('‚úÖ [AI GENERATION] Utilisateur authentifi√©:', req.user._id);

      const startTime = Date.now();
      const constraints: PlanningConstraints = req.body;

      console.log(
        `[AI Wizard] G√©n√©ration de planning avec contraintes structur√©es pour l'√©quipe ${constraints.teamId}`
      );

      // üîç R√©cup√©ration de l'√©quipe
      const team = await TeamModel.findById(constraints.teamId)
        .populate("employeeIds")
        .lean();

      if (!team) {
        return res.status(404).json({
          success: false,
          message: "√âquipe introuvable",
        });
      }

      // üîê V√©rification des droits d'acc√®s
      const userIsManager = team.managerIds.some(
        (managerId) => managerId.toString() === req.user._id.toString()
      );
      const userIsDirecteur =
        req.user.role === "directeur" &&
        req.user.companyId === team.companyId?.toString();
      const userIsAdmin = req.user.role === "admin";

      if (!userIsManager && !userIsDirecteur && !userIsAdmin) {
        return res.status(403).json({
          success: false,
          message: "Acc√®s non autoris√© √† cette √©quipe",
        });
      }

      const employees = team.employeeIds as unknown as IEmployee[];

      // üß† Construction du prompt structur√© pour DeepSeek
      const weekDate = new Date(constraints.year, 0, 1 + (constraints.weekNumber - 1) * 7);
      const weekInfo = `Semaine ${constraints.weekNumber}/${constraints.year} (${weekDate.toLocaleDateString("fr-FR")})`;

      let employeeDetails = "";
      constraints.employees.forEach((emp) => {
        const employee = employees.find(e => (e as any)._id.toString() === emp.id);
        if (employee) {
          employeeDetails += `- ${emp.name} (${emp.email}):
  * Contrat: ${emp.weeklyHours || 35}h/semaine (OBLIGATION CONTRACTUELLE)
  * Jour de repos souhait√©: ${emp.restDay || 'Flexible'} ${emp.restDay ? '(PRIORIT√â ABSOLUE)' : ''}
  * Cr√©neaux pr√©f√©r√©s: ${emp.preferredHours?.length ? emp.preferredHours.join(', ') : 'Aucune pr√©f√©rence'}
  * Coupures autoris√©es: ${emp.allowSplitShifts ? 'Oui' : 'Non - service continu obligatoire'}
  * Exceptions: ${emp.exceptions?.length ? emp.exceptions.map(e => `${e.date} (${e.type}: ${e.reason})`).join(', ') : 'Aucune'}
`;
        }
      });

      const openingDaysDetails = constraints.companyConstraints.openingDays.map(day => {
        const dayFr = {
          monday: 'Lundi', tuesday: 'Mardi', wednesday: 'Mercredi',
          thursday: 'Jeudi', friday: 'Vendredi', saturday: 'Samedi', sunday: 'Dimanche'
        }[day];
        const hours = constraints.companyConstraints.openingHours.find(h => h.day === day);
        return `${dayFr}: ${hours?.hours.join(', ') || 'Horaires standards'}`;
      }).join('\n');

      // Contraintes de r√¥les si elles existent
      let roleConstraintsDetails = "";
      if (constraints.companyConstraints.roleConstraints?.length) {
        roleConstraintsDetails = `\nüé≠ CONTRAINTES DE R√îLES OBLIGATOIRES:
${constraints.companyConstraints.roleConstraints.map(rc => 
  `- R√¥le "${rc.role}" REQUIS aux cr√©neaux: ${rc.requiredAt.join(', ')}`
).join('\n')}
ATTENTION: Ces r√¥les doivent √™tre pr√©sents aux cr√©neaux sp√©cifi√©s EN PLUS du personnel minimum.
`;
      }

      // Construire les horaires d'ouverture d√©taill√©s
      const detailedOpeningHours = constraints.companyConstraints.openingHours.map(dayHours => {
        const dayFr = {
          monday: 'LUNDI', tuesday: 'MARDI', wednesday: 'MERCREDI',
          thursday: 'JEUDI', friday: 'VENDREDI', saturday: 'SAMEDI', sunday: 'DIMANCHE'
        }[dayHours.day];
        return `- ${dayFr}: ${dayHours.hours.join(' et ')} (COUVERTURE OBLIGATOIRE INTEGRALE)`;
      }).join('\n');

      const prompt = `Tu es un expert en planification RH. Genere un planning hebdomadaire optimise et equilibre.

EQUIPE "${team.name}" - ${weekInfo}

EMPLOYES (${constraints.employees.length} personnes):
${employeeDetails}

CONTRAINTES ENTREPRISE OBLIGATOIRES:
Jours d'ouverture:
${openingDaysDetails}${roleConstraintsDetails}

HORAIRES D'OUVERTURE PRECIS PAR JOUR (OBLIGATION ABSOLUE):
${detailedOpeningHours}

ATTENTION CRITIQUE: Tu DOIS respecter EXACTEMENT ces horaires jour par jour. 
- PAS de 17h par defaut si fermeture a 20h !
- PAS de fermeture 12h-13h si creneau continu !
- UTILISE les creneaux EXACTS ci-dessus pour chaque jour !

PERSONNEL MINIMUM SIMULTANE: ${constraints.companyConstraints.minStaffSimultaneously || 2} employes presents EN PERMANENCE pendant les heures d'ouverture

LIMITES DE TRAVAIL QUOTIDIEN:
- Heures MINIMUM par jour: ${constraints.companyConstraints.minHoursPerDay || 4}h
- Heures MAXIMUM par jour: ${constraints.companyConstraints.maxHoursPerDay || 10}h

GESTION DES PAUSES DEJEUNER:
- Duree: ${constraints.companyConstraints.lunchBreakDuration || 60} minutes
- Obligatoire: ${constraints.companyConstraints.mandatoryLunchBreak ? 'OUI - pour tout creneau > 6h' : 'NON'}
- ROTATION OBLIGATOIRE: Les pauses dejeuner doivent etre echelonnees pour maintenir le personnel minimum

PREFERENCES IA:
- Favoriser les coupures: ${constraints.preferences.favorSplit ? 'Oui' : 'Non'}
- Uniformite des horaires: ${constraints.preferences.favorUniformity ? 'Oui' : 'Non'}
- Equilibrer la charge: ${constraints.preferences.balanceWorkload ? 'Oui' : 'Non'}
- Prioriser preferences employes: ${constraints.preferences.prioritizeEmployeePreferences ? 'Oui' : 'Non'}

OBJECTIFS CRITIQUES (RESPECT ABSOLU REQUIS):
1. MAINTENIR ${constraints.companyConstraints.minStaffSimultaneously || 2} employes presents EN PERMANENCE pendant TOUS les creneaux d'ouverture definis ci-dessus
2. RESPECTER EXACTEMENT les horaires specifies pour chaque jour (pas d'horaires par defaut !)
3. ECHELONNER les pauses dejeuner UNIQUEMENT quand il y a une coupure definie (ex: 08:00-12:00, 13:00-20:00)
4. COUVRIR INTEGRALEMENT chaque creneau d'ouverture defini (pas de trous dans la couverture)
5. RESPECTER STRICTEMENT les heures contractuelles de chaque employe (pas plus, pas moins)
6. APPLIQUER OBLIGATOIREMENT les jours de repos souhaites (priorite absolue)
7. RESPECTER les creneaux horaires preferes de chaque employe quand possible
8. RESPECTER les limites quotidiennes (${constraints.companyConstraints.minHoursPerDay || 4}h-${constraints.companyConstraints.maxHoursPerDay || 10}h par jour)
9. GERER toutes les exceptions individuelles (conges, formations, indisponibilites)
10. RESPECTER les preferences de coupures/services continus de chaque employe
11. EQUILIBRER la charge de travail entre les employes selon les preferences activees

REGLES TECHNIQUES STRICTES:
- Format horaire: "HH:MM-HH:MM" (ex: "08:00-12:00")
- Pauses dejeuner OBLIGATOIRES: ${constraints.companyConstraints.lunchBreakDuration || 60}min minimum entre creneaux matin/apres-midi
- Repos quotidien: 11h minimum entre deux services
- JAMAIS moins de ${constraints.companyConstraints.minStaffSimultaneously || 2} employes presents simultanement
- Etaler les pauses sur 12h-14h pour maintenir la continuite de service
- Jours de repos: Un employe avec restDay = "lundi" NE TRAVAILLE PAS le lundi ([] vide obligatoire)
- Heures contractuelles: Calculer precisement pour atteindre exactement les heures/semaine de chaque employe
- Creneaux preferes: Si un employe prefere "08:00-16:00", privilegier ces horaires quand possible
- Service continu: Si allowSplitShifts = false, donner UN SEUL creneau par jour (ex: "08:00-16:00")
- Exceptions: Si un employe a une exception "unavailable" le mercredi, mercredi = []

REPONSE OBLIGATOIRE: UNIQUEMENT LE JSON CI-DESSOUS (AUCUN TEXTE, AUCUNE EXPLICATION)

REPONDS UNIQUEMENT AVEC CE FORMAT JSON (pas de backticks, pas de texte explicatif):

EXEMPLE avec les creneaux definis ci-dessus:
{
  "lundi": { 
    "Alice Martin": ["08:00-12:00", "13:00-20:00"],
    "Jean Dupont": ["08:00-12:30", "13:30-18:00"],
    "Sophie Bernard": ["09:00-13:00", "14:00-20:00"]
  },
  "mardi": { 
    "Alice Martin": ["08:00-13:00", "14:00-19:00"],
    "Jean Dupont": ["09:30-12:00", "13:00-20:00"],
    "Sophie Bernard": []
  },
  "samedi": { "Alice Martin": ["08:00-12:00", "13:00-20:00"] },
  "dimanche": { "Alice Martin": ["08:00-12:00"] }
}

GENERE LE PLANNING OPTIMAL EN RESPECTANT TOUTES CES DIRECTIVES.

RAPPEL CRUCIAL: Ta reponse doit commencer directement par { et finir par }. Aucun autre texte n'est autorise.`;

      // üåê Appel √† l'API OpenRouter avec DeepSeek
      const openRouterApiKey = process.env.OPENROUTER_API_KEY;

      if (!openRouterApiKey) {
        return res.status(500).json({
          success: false,
          message: "Configuration API manquante",
        });
      }

      const openRouterResponse = await fetch(
        "https://openrouter.ai/api/v1/chat/completions",
        {
          method: "POST",
          headers: {
            Authorization: `Bearer ${openRouterApiKey}`,
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            model: "google/gemini-2.0-flash-exp:free",
            messages: [
              {
                role: "system",
                content: "Tu es un expert en organisation RH. Tu DOIS respecter ABSOLUMENT ces r√®gles critiques: 1) UTILISER EXACTEMENT les horaires d'ouverture sp√©cifi√©s pour chaque jour (pas d'horaires par d√©faut !), 2) Maintenir le personnel minimum en permanence pendant les heures d'ouverture, 3) √âchelonner les pauses d√©jeuner pour √©viter que tous soient absents, 4) Couvrir INT√âGRALEMENT les horaires d'ouverture, 5) RESPECTER les jours de repos obligatoires (restDay), 6) RESPECTER les pr√©f√©rences horaires individuelles, 7) G√âRER les exceptions d'indisponibilit√©, 8) RESPECTER les heures contractuelles de chaque employ√©. Tu DOIS r√©pondre UNIQUEMENT avec un objet JSON valide, PAS de markdown, PAS de texte explicatif."
              },
              {
                role: "user",
                content: prompt,
              },
              {
                role: "assistant",
                content: "Je vais r√©pondre uniquement avec le JSON demand√©, sans aucun autre texte:"
              },
              {
                role: "user",
                content: "RAPPEL FINAL CRITIQUE: 1) UTILISE EXACTEMENT les horaires d√©finis pour chaque jour ci-dessus (PAS de valeurs par d√©faut !), 2) MAINTIENS ${constraints.companyConstraints.minStaffSimultaneously || 2} employ√©s minimum en permanence, 3) √âCHELONNE les pauses uniquement si coupure d√©finie, 4) R√©ponds UNIQUEMENT avec l'objet JSON pur (pas de ```json, pas de texte)."
              },
            ],
            temperature: 0.05,
            max_tokens: 3000,
          }),
        }
      );

      if (!openRouterResponse.ok) {
        const errorText = await openRouterResponse.text();
        console.error(`[AI Wizard] Erreur OpenRouter:`, errorText);
        return res.status(500).json({
          success: false,
          message: "Erreur lors de l'appel √† l'API OpenRouter",
          error: errorText,
        });
      }

      const openRouterData: OpenRouterResponse = await openRouterResponse.json();
      // G√©rer les mod√®les qui mettent la r√©ponse dans 'reasoning' (comme Hunyuan) ou 'content'
      const aiResponseContent = openRouterData.choices[0].message.content || 
                                openRouterData.choices[0].message.reasoning || 
                                'Erreur: Aucune r√©ponse de l\'IA';

      // üìä Parse et validation de la r√©ponse
      let generatedScheduleData: GeneratedScheduleData;

      try {
        let cleanedResponse = aiResponseContent.trim();
        
        // Nettoyer les marqueurs de code
        cleanedResponse = cleanedResponse.replace(/```json|```/g, "").trim();
        
        // Si la r√©ponse ne commence pas par { ou [, essayer d'extraire le JSON
        if (!cleanedResponse.startsWith('{') && !cleanedResponse.startsWith('[')) {
          console.log('üîß [AI GENERATION] R√©ponse non-JSON d√©tect√©e, tentative d\'extraction');
          
          // Chercher des blocs JSON dans la r√©ponse
          const jsonMatch = cleanedResponse.match(/\{[\s\S]*\}|\[[\s\S]*\]/);
          if (jsonMatch) {
            cleanedResponse = jsonMatch[0].trim();
            console.log('üéØ [AI GENERATION] JSON extrait:', cleanedResponse.substring(0, 200) + '...');
          } else {
            // Fallback: G√©n√©rer un planning basique automatiquement pour TOUS les employ√©s
            console.log('üîÑ [AI GENERATION] G√©n√©ration automatique de planning fallback');
            generatedScheduleData = {
              lundi: {},
              mardi: {},
              mercredi: {},
              jeudi: {},
              vendredi: {},
              samedi: {},
              dimanche: {}
            };
            
            // G√©n√©rer des horaires par d√©faut selon les horaires d'ouverture ou des valeurs par d√©faut
            const defaultHours = constraints.companyConstraints.openingHours && constraints.companyConstraints.openingHours.length > 0 
              ? constraints.companyConstraints.openingHours
              : [
                  { day: 'monday', hours: ['08:00-12:00', '13:00-17:00'] },
                  { day: 'tuesday', hours: ['08:00-12:00', '13:00-17:00'] },
                  { day: 'wednesday', hours: ['08:00-12:00', '13:00-17:00'] },
                  { day: 'thursday', hours: ['08:00-12:00', '13:00-17:00'] },
                  { day: 'friday', hours: ['08:00-12:00', '13:00-17:00'] }
                ];
            
            // Distribuer √©quitablement les employ√©s
            const workingDays = ['lundi', 'mardi', 'mercredi', 'jeudi', 'vendredi'];
            constraints.employees.forEach((emp, index) => {
              workingDays.forEach((day, dayIndex) => {
                // V√©rifier les absences exceptionnelles
                const dayEn = {
                  lundi: 'monday',
                  mardi: 'tuesday', 
                  mercredi: 'wednesday',
                  jeudi: 'thursday',
                  vendredi: 'friday'
                }[day];
                
                const dayHours = defaultHours.find(h => h.day === dayEn);
                
                // V√©rifier les absences exceptionnelles pour ce jour
                const weekRange = getWeekDateRange(constraints.weekNumber, constraints.year);
                const dayDate = new Date(weekRange.start);
                dayDate.setDate(dayDate.getDate() + dayIndex);
                const dayDateString = dayDate.toISOString().split('T')[0];
                
                // V√©rifier les absences exceptionnelles pour ce jour (support multi-absences)
                const hasUnavailableException = emp.exceptions && emp.exceptions.some(exc => 
                  exc.date === dayDateString && 
                  (exc.type === 'unavailable' || exc.type === 'sick' || exc.type === 'vacation')
                );
                
                const hasReducedHours = emp.exceptions && emp.exceptions.some(exc => 
                  exc.date === dayDateString && exc.type === 'reduced'
                );
                
                // Alterner les jours de repos pour √©quilibrer
                const isRestDay = (index + dayIndex) % 5 === 4; // 1 jour de repos par semaine par employ√©
                
                if (!isRestDay && !hasUnavailableException && dayHours && dayHours.hours.length > 0) {
                  if (hasReducedHours) {
                    // Horaires r√©duits : prendre seulement le matin
                    const morningHours = dayHours.hours.filter(h => h.startsWith('08:') || h.startsWith('09:'));
                    generatedScheduleData[day][emp.name] = morningHours.length > 0 ? morningHours : ['08:00-12:00'];
                    console.log(`üîÑ [AI GENERATION] Horaires r√©duits pour ${emp.name} le ${day}: ${JSON.stringify(generatedScheduleData[day][emp.name])}`);
                  } else {
                    generatedScheduleData[day][emp.name] = dayHours.hours;
                  }
                } else {
                  generatedScheduleData[day][emp.name] = [];
                  if (hasUnavailableException) {
                    console.log(`‚ùå [AI GENERATION] Absence pour ${emp.name} le ${day}: ${dayDateString}`);
                  }
                }
              });
              
              // Weekends vides par d√©faut
              generatedScheduleData.samedi[emp.name] = [];
              generatedScheduleData.dimanche[emp.name] = [];
            });
            
            console.log('‚úÖ [AI GENERATION] Planning fallback g√©n√©r√© pour tous les employ√©s:', Object.keys(generatedScheduleData.lundi || {}));
          }
        } else {
          generatedScheduleData = JSON.parse(cleanedResponse);
          console.log('‚úÖ [AI GENERATION] JSON pars√© avec succ√®s');
        }
      } catch (parseError) {
        console.error(`üí• [AI GENERATION] Erreur parsing:`, parseError);
        console.error(`üìù [AI GENERATION] R√©ponse brute (premiers 500 chars):`, aiResponseContent.substring(0, 500));
        return res.status(500).json({
          success: false,
          message: "Impossible de parser la r√©ponse de l'IA",
          error: (parseError as Error).message,
          aiResponse: aiResponseContent.substring(0, 1000), // Limiter pour √©viter les gros logs
        });
      }

      // üîç VALIDATION COMPL√àTE DU PLANNING G√âN√âR√â
      const validationErrors: string[] = [];
      const dayMapping = {
        lundi: 'monday', mardi: 'tuesday', mercredi: 'wednesday',
        jeudi: 'thursday', vendredi: 'friday', samedi: 'saturday', dimanche: 'sunday'
      };

      // Validation 1: V√©rifier les jours de repos obligatoires
      constraints.employees.forEach((emp) => {
        if (emp.restDay) {
          const dayFr = Object.keys(dayMapping).find(key => dayMapping[key] === emp.restDay);
          if (dayFr && generatedScheduleData[dayFr] && generatedScheduleData[dayFr][emp.name] && 
              generatedScheduleData[dayFr][emp.name].length > 0) {
            validationErrors.push(`‚ùå ${emp.name} doit avoir repos le ${dayFr} mais a des cr√©neaux: ${generatedScheduleData[dayFr][emp.name]}`);
          }
        }
      });

      // Validation 2: V√©rifier les exceptions d'indisponibilit√©
      constraints.employees.forEach((emp) => {
        if (emp.exceptions?.length) {
          emp.exceptions.forEach((exception) => {
            if (exception.type === 'unavailable' || exception.type === 'sick' || exception.type === 'vacation') {
              const weekRange = getWeekDateRange(constraints.weekNumber, constraints.year);
              const exceptionDate = new Date(exception.date);
              
              // V√©rifier si l'exception tombe dans la semaine planifi√©e
              if (exceptionDate >= weekRange.start && exceptionDate <= weekRange.end) {
                const dayOfWeek = exceptionDate.getDay();
                const dayName = ['dimanche', 'lundi', 'mardi', 'mercredi', 'jeudi', 'vendredi', 'samedi'][dayOfWeek];
                
                if (generatedScheduleData[dayName] && generatedScheduleData[dayName][emp.name] && 
                    generatedScheduleData[dayName][emp.name].length > 0) {
                  validationErrors.push(`‚ùå ${emp.name} indisponible le ${dayName} (${exception.reason}) mais a des cr√©neaux: ${generatedScheduleData[dayName][emp.name]}`);
                }
              }
            }
          });
        }
      });

      // Validation 3: V√©rifier la couverture minimale
      const workingDays = constraints.companyConstraints.openingDays.filter(day => 
        ['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday'].includes(day)
      );
      
      workingDays.forEach((dayEn) => {
        const dayFr = Object.keys(dayMapping).find(key => dayMapping[key] === dayEn);
        if (dayFr && generatedScheduleData[dayFr]) {
          const workingEmployees = Object.values(generatedScheduleData[dayFr]).filter(slots => 
            Array.isArray(slots) && slots.length > 0
          ).length;
          
          const minStaff = constraints.companyConstraints.minStaffSimultaneously || 2;
          if (workingEmployees < minStaff) {
            validationErrors.push(`‚ùå ${dayFr}: seulement ${workingEmployees} employ√©(s) mais ${minStaff} minimum requis`);
          }
        }
      });

      // Validation 4: V√©rifier les heures contractuelles (tol√©rance ¬±10%)
      constraints.employees.forEach((emp) => {
        const contractualHours = emp.weeklyHours || 35;
        let totalHours = 0;
        
        Object.keys(generatedScheduleData).forEach((day) => {
          if (generatedScheduleData[day][emp.name]) {
            const slots = generatedScheduleData[day][emp.name];
            if (Array.isArray(slots)) {
              slots.forEach((slot: string) => {
                const [start, end] = slot.split('-');
                if (start && end) {
                  const startTime = new Date(`2000-01-01T${start}:00`);
                  const endTime = new Date(`2000-01-01T${end}:00`);
                  totalHours += (endTime.getTime() - startTime.getTime()) / (1000 * 60 * 60);
                }
              });
            }
          }
        });
        
        const tolerance = contractualHours * 0.1; // 10% de tol√©rance
        if (Math.abs(totalHours - contractualHours) > tolerance) {
          validationErrors.push(`‚ö†Ô∏è ${emp.name}: ${totalHours.toFixed(1)}h planifi√©es vs ${contractualHours}h contractuelles (tol√©rance: ¬±${tolerance.toFixed(1)}h)`);
        }
      });

      // Si des erreurs critiques sont d√©tect√©es, loguer mais continuer
      if (validationErrors.length > 0) {
        console.warn('‚ö†Ô∏è [AI VALIDATION] Contraintes non respect√©es:');
        validationErrors.forEach(error => console.warn(error));
        
        // Ajouter les erreurs comme contraintes non respect√©es dans la r√©ponse
        // mais ne pas bloquer la cr√©ation du planning (l'utilisateur peut corriger)
      }

      // üíæ Sauvegarde des plannings g√©n√©r√©s
      const savedSchedules: IGeneratedSchedule[] = [];
      
      console.log('üîç [AI GENERATION] Donn√©es g√©n√©r√©es pour analyse:');
      console.log('üìä [AI GENERATION] Planning brut:', JSON.stringify(generatedScheduleData, null, 2));
      console.log('üë• [AI GENERATION] Employ√©s √† traiter:', employees.map(e => `${e.firstName} ${e.lastName}`));
      console.log('üè∑Ô∏è [AI GENERATION] Contraintes employ√©s:', constraints.employees.map(e => `${e.name} (ID: ${e.id})`));

      for (const employee of employees) {
        const employeeFullName = `${employee.firstName} ${employee.lastName}`;
        const employeeScheduleData: { [day: string]: { slots?: string[] } } = {};

        const daysOfWeek = [
          "lundi", "mardi", "mercredi", "jeudi", "vendredi", "samedi", "dimanche",
        ];

        for (const day of daysOfWeek) {
          let employeeSlots: string[] = [];
          
          // Essayer plusieurs variantes du nom pour la correspondance
          if (generatedScheduleData[day]) {
            const dayData = generatedScheduleData[day];
            
            // 1. Correspondance exacte
            if (dayData[employeeFullName] && dayData[employeeFullName].length > 0) {
              employeeSlots = dayData[employeeFullName];
            }
            // 2. Correspondance avec le nom des contraintes (cas du fallback)
            else {
              const constraintEmployee = constraints.employees.find(emp => 
                emp.id === ((employee as any)._id || employee.userId)?.toString()
              );
              if (constraintEmployee && dayData[constraintEmployee.name] && dayData[constraintEmployee.name].length > 0) {
                employeeSlots = dayData[constraintEmployee.name];
              }
              // 3. Correspondance partielle (pr√©nom seul, nom seul)
              else {
                const keys = Object.keys(dayData);
                const matchingKey = keys.find(key => 
                  key.includes(employee.firstName) || 
                  key.includes(employee.lastName) ||
                  employee.firstName.includes(key) ||
                  employee.lastName.includes(key)
                );
                if (matchingKey && dayData[matchingKey] && dayData[matchingKey].length > 0) {
                  employeeSlots = dayData[matchingKey];
                }
              }
            }
          }
          
          if (employeeSlots.length > 0) {
            employeeScheduleData[day] = {
              slots: employeeSlots,
            };
          } else {
            employeeScheduleData[day] = {};
          }
        }

        const generatedSchedule = new GeneratedScheduleModel({
          employeeId: (employee as any)._id || employee.userId,
          scheduleData: new Map(Object.entries(employeeScheduleData)),
          generatedBy: req.user._id,
          timestamp: new Date(),
          status: "draft",
          weekNumber: constraints.weekNumber,
          year: constraints.year,
          metadata: {
            wizardGeneration: true,
            constraints: constraints,
          },
        });

        const savedSchedule = await generatedSchedule.save();
        savedSchedules.push(savedSchedule);
        
        // Log du planning sauvegard√© pour cet employ√©
        const totalSlots = Object.values(employeeScheduleData).reduce((total, day) => total + (day.slots?.length || 0), 0);
        console.log(`‚úÖ [AI GENERATION] Planning sauvegard√© pour ${employeeFullName}: ${totalSlots} cr√©neaux au total`);
        if (totalSlots === 0) {
          console.log(`‚ö†Ô∏è [AI GENERATION] ATTENTION: Aucun cr√©neau pour ${employeeFullName}!`);
        }
      }

      const processingTime = Date.now() - startTime;

      console.log(
        `[AI Wizard] Planning g√©n√©r√© avec succ√®s en ${processingTime}ms pour ${employees.length} employ√©s`
      );

      return res.status(201).json({
        success: true,
        message: `Planning g√©n√©r√© avec succ√®s pour ${employees.length} employ√©s de l'√©quipe ${team.name}`,
        schedule: savedSchedules.map((schedule) => ({
          employeeId: schedule.employeeId,
          employeeName: employees.find(e => (e as any)._id.toString() === schedule.employeeId.toString())?.firstName + ' ' + employees.find(e => (e as any)._id.toString() === schedule.employeeId.toString())?.lastName,
          day: 'mixed',
          slots: [],
          totalHours: 0
        })),
        processingTime,
        data: {
          teamId: team._id,
          teamName: team.name,
          weekNumber: constraints.weekNumber,
          year: constraints.year,
          employeesCount: employees.length,
          generatedSchedules: savedSchedules.map((schedule) => ({
            id: (schedule as any)._id,
            employeeId: schedule.employeeId,
            status: schedule.status,
            timestamp: schedule.timestamp,
          })),
          rawScheduleData: generatedScheduleData,
          validationWarnings: validationErrors.length > 0 ? validationErrors : undefined,
        },
      });
    } catch (error) {
      console.error("üí• [AI GENERATION] ERREUR FATALE:");
      console.error("üìç [AI GENERATION] Type d'erreur:", error instanceof Error ? error.constructor.name : typeof error);
      console.error("üìù [AI GENERATION] Message:", error instanceof Error ? error.message : String(error));
      console.error("üîç [AI GENERATION] Stack trace:", error instanceof Error ? error.stack : 'Pas de stack disponible');
      console.error("üìä [AI GENERATION] D√©tails complets:", error);
      
      return res.status(500).json({
        success: false,
        message: "Erreur serveur lors de la g√©n√©ration du planning",
        error: error instanceof Error ? error.message : String(error),
        errorType: error instanceof Error ? error.constructor.name : typeof error,
      });
    }
  }
);

/**
 * @route   DELETE /api/ai/generated-schedules/bulk
 * @desc    Supprimer plusieurs plannings IA s√©lectionn√©s (ou tous)
 * @access  Private - Manager, Directeur, Admin uniquement
 */
router.delete(
  "/generated-schedules/bulk",
  authenticateToken,
  checkRole(["manager", "directeur", "admin"]),
  async (req: AuthRequest, res: Response) => {
    try {
      // üîê Validation de l'utilisateur authentifi√©
      if (!req.user || !req.user._id) {
        return res.status(401).json({
          success: false,
          message: "Utilisateur non authentifi√©",
        });
      }

      const { scheduleIds, deleteAll } = req.body;

      console.log(
        `[AI] Suppression demand√©e par ${req.user._id} (${req.user.role}) - deleteAll: ${deleteAll}, IDs: ${scheduleIds?.length || 0}`
      );

      // ‚úÖ Validation des param√®tres
      if (!deleteAll && (!scheduleIds || !Array.isArray(scheduleIds) || scheduleIds.length === 0)) {
        return res.status(400).json({
          success: false,
          message: "Liste des IDs de plannings √† supprimer requise ou flag deleteAll manquant",
        });
      }

      // üîç Construction de la requ√™te selon le r√¥le et les permissions
      let baseQuery: any = { status: "draft" };

      if (req.user.role === "manager") {
        // Manager : seulement les plannings des √©quipes qu'il g√®re
        const managedTeams = await TeamModel.find({
          managerIds: req.user._id,
        }).select("_id");

        const teamIds = managedTeams.map((team) => team._id);

        if (teamIds.length === 0) {
          return res.status(200).json({
            success: true,
            data: { deletedCount: 0 },
            message: "Aucune √©quipe g√©r√©e trouv√©e",
          });
        }

        // R√©cup√©rer les employ√©s de ces √©quipes
        const teamsWithEmployees = await TeamModel.find({
          _id: { $in: teamIds },
        }).select("employeeIds");

        const employeeIds: any[] = [];
        teamsWithEmployees.forEach((team) => {
          if (team.employeeIds && team.employeeIds.length > 0) {
            employeeIds.push(...team.employeeIds);
          }
        });

        baseQuery.employeeId = { $in: employeeIds };
      } else if (req.user.role === "directeur") {
        // Directeur : seulement les plannings des √©quipes de sa soci√©t√©
        const companyTeams = await TeamModel.find({
          companyId: req.user.companyId,
        }).select("employeeIds");

        const employeeIds: any[] = [];
        companyTeams.forEach((team) => {
          if (team.employeeIds && team.employeeIds.length > 0) {
            employeeIds.push(...team.employeeIds);
          }
        });

        if (employeeIds.length === 0) {
          return res.status(200).json({
            success: true,
            data: { deletedCount: 0 },
            message: "Aucun employ√© trouv√© dans votre soci√©t√©",
          });
        }

        baseQuery.employeeId = { $in: employeeIds };
      }
      // Admin : pas de filtre suppl√©mentaire

      // üìä Construction de la requ√™te finale
      let deleteQuery = { ...baseQuery };

      if (!deleteAll && scheduleIds) {
        // Supprimer seulement les IDs sp√©cifi√©s
        deleteQuery._id = { $in: scheduleIds.filter(id => mongoose.Types.ObjectId.isValid(id)) };
      }

      console.log(`[AI] Requ√™te de suppression:`, JSON.stringify(deleteQuery, null, 2));

      // üóëÔ∏è Suppression des plannings
      const deleteResult = await GeneratedScheduleModel.deleteMany(deleteQuery);

      console.log(`[AI] ${deleteResult.deletedCount} plannings supprim√©s`);

      return res.status(200).json({
        success: true,
        data: {
          deletedCount: deleteResult.deletedCount,
          deletedIds: deleteAll ? "tous" : scheduleIds,
        },
        message: `${deleteResult.deletedCount} planning(s) supprim√©(s) avec succ√®s`,
      });
    } catch (error) {
      console.error("[AI] Erreur lors de la suppression des plannings:", error);
      return res.status(500).json({
        success: false,
        message: "Erreur serveur lors de la suppression des plannings",
        error: error instanceof Error ? error.message : String(error),
      });
    }
  }
);

export default router;
