import bcrypt from "bcrypt";
import crypto from "crypto";
import express, { NextFunction, Request, Response } from "express";
import jwt from "jsonwebtoken";
import passport from "passport";
import { generateToken } from "../config/passport";
import Company from "../models/Company.model";
import User, { UserDocument } from "../models/User.model";
import { sendPasswordResetEmail } from "../utils/email";
import { sendTestEmail } from "../utils/emailTest";
import {
  isValidUrl,
  passwordRequirementsMessage,
  validatePasswordComplexity,
} from "../utils/password";

// Types personnalis√©s pour la requ√™te Express avec utilisateur
interface AuthenticatedRequest extends Request {
  user?: {
    id: string;
    email: string;
    role: string;
    firstName: string;
    lastName: string;
    teamIds?: string[];
    companyId?: string;
    toObject?: () => any;
  };
}

const router = express.Router();

/**
 * Importer le middleware d'authentification centralis√© qui g√®re les cookies
 */
import { authenticateToken } from "../middlewares/auth.middleware";

/**
 * @route POST /api/auth/register
 * @desc Inscription d'un directeur avec cr√©ation d'entreprise
 * @access Public
 */
router.post("/register", async (req: Request, res: Response) => {
  try {
    const {
      firstName,
      lastName,
      email,
      password,
      phone,
      companyName,
      profilePicture,
      companyLogo,
    } = req.body;

    // Validation des champs obligatoires
    if (!firstName || !lastName || !email || !password || !companyName) {
      return res.status(400).json({
        success: false,
        message:
          "Champs requis manquants. Pr√©nom, nom, email, mot de passe et nom d'entreprise sont obligatoires.",
      });
    }

    // Validation de l'email
    const emailRegex = /^\w+([.-]?\w+)*@\w+([.-]?\w+)*(\.\w{2,3})+$/;
    if (!emailRegex.test(email)) {
      return res
        .status(400)
        .json({ success: false, message: "Format d'email invalide" });
    }

    // Validation du mot de passe RGPD
    if (!validatePasswordComplexity(password)) {
      return res
        .status(422)
        .json({ success: false, message: passwordRequirementsMessage });
    }

    // Validation des URLs des images si pr√©sentes
    if (profilePicture && !isValidUrl(profilePicture)) {
      return res
        .status(400)
        .json({ success: false, message: "URL de photo de profil invalide" });
    }

    if (companyLogo && !isValidUrl(companyLogo)) {
      return res
        .status(400)
        .json({ success: false, message: "URL de logo d'entreprise invalide" });
    }

    // Validation du num√©ro de t√©l√©phone si pr√©sent
    if (phone) {
      const phoneRegex = /^(\+\d{1,3}\s?)?(\d{9,15})$/;
      if (!phoneRegex.test(phone)) {
        return res.status(400).json({
          success: false,
          message: "Format de num√©ro de t√©l√©phone invalide",
        });
      }
    }

    // V√©rification de l'unicit√© de l'email
    const existingUser = await User.findOne({ email });
    if (existingUser) {
      return res.status(409).json({
        success: false,
        message: "Cette adresse email est d√©j√† utilis√©e",
      });
    }

    // V√©rification de l'unicit√© du nom d'entreprise
    const existingCompany = await Company.findOne({ name: companyName });
    if (existingCompany) {
      return res.status(400).json({
        success: false,
        message:
          "Ce nom d'entreprise existe d√©j√†. Ajoutez une ville ou un suffixe pour le diff√©rencier.",
      });
    }

    // Cr√©ation de l'entreprise
    const newCompany = await Company.create({
      name: companyName,
      logoUrl: companyLogo || null,
    });

    // Cr√©ation de l'utilisateur directeur
    const newUser = await User.create({
      firstName,
      lastName,
      email,
      password, // Le hashage est g√©r√© par le middleware pre-save dans User.model.ts
      phone,
      photoUrl: profilePicture || undefined,
      role: "directeur", // R√¥le fix√© en dur √† "directeur"
      companyId: newCompany._id,
      isEmailVerified: true, // On consid√®re l'email v√©rifi√© √† l'inscription
      status: "active",
    });

    // G√©n√©ration du token JWT
    const token = generateToken(newUser.toObject());

    // R√©ponse avec les donn√©es minimales de l'utilisateur (sans mot de passe)
    res.status(201).json({
      success: true,
      message: "Inscription r√©ussie",
      token,
      user: {
        id: newUser._id,
        firstName: newUser.firstName,
        lastName: newUser.lastName,
        email: newUser.email,
        role: newUser.role,
        companyId: newUser.companyId,
        profilePicture: newUser.photoUrl || undefined,
      },
      company: {
        id: newCompany._id,
        name: newCompany.name,
        logo: newCompany.logoUrl || undefined,
      },
    });
  } catch (error: any) {
    console.error("Erreur lors de l'inscription:", error);

    // Gestion des erreurs sp√©cifiques de MongoDB
    if (error.name === "MongoServerError" && error.code === 11000) {
      // Gestion des violations de contrainte d'unicit√©
      if (error.keyPattern?.name) {
        return res.status(400).json({
          success: false,
          message:
            "Ce nom d'entreprise existe d√©j√†. Ajoutez une ville ou un suffixe pour le diff√©rencier.",
        });
      }
      if (error.keyPattern?.email) {
        return res.status(409).json({
          success: false,
          message: "Cette adresse email est d√©j√† utilis√©e",
        });
      }
    }

    res.status(500).json({
      success: false,
      message: "Une erreur est survenue lors de l'inscription",
      error: process.env.NODE_ENV === "development" ? error.message : undefined,
    });
  }
});

/**
 * @route POST /api/auth/login
 * @desc Connexion par email/mot de passe
 */
router.post("/login", async (req: Request, res: Response) => {
  try {
    const { email, password } = req.body;
    console.log("üîê Tentative de connexion pour:", email);

    // R√©cup√©rer l'utilisateur avec son mot de passe
    const user = await User.findOne({ email }).select("+password");

    if (!user) {
      console.warn("‚ùå Utilisateur non trouv√© pour l'email :", email);
      return res
        .status(401)
        .json({ success: false, message: "Identifiants incorrects" });
    }

    console.log("‚úÖ Utilisateur trouv√© pour connexion");

    if (!user.password) {
      // V√©rifier si c'est un employ√© qui n'a pas encore cr√©√© son mot de passe
      if (user.role === "employee" && user.resetPasswordToken) {
        console.log("‚ÑπÔ∏è Employ√© n'a pas encore cr√©√© son mot de passe");
        return res.status(403).json({
          success: false,
          message:
            "Veuillez cr√©er votre mot de passe en utilisant le lien re√ßu par email.",
          code: "PASSWORD_NOT_CREATED",
        });
      }

      console.error("‚ùå Champ 'password' manquant malgr√© .select('+password')");
      return res.status(500).json({
        success: false,
        message: "Mot de passe non disponible. Contact support.",
      });
    }

    // V√©rifier le mot de passe
    const isValidPassword = await bcrypt.compare(password, user.password);

    if (!isValidPassword) {
      console.warn("‚ùå Mot de passe incorrect pour l'utilisateur :", email);
      return res
        .status(401)
        .json({ success: false, message: "Identifiants incorrects" });
    }

    console.log("‚úÖ Mot de passe v√©rifi√© avec succ√®s pour:", email);

    // G√©n√©rer le token JWT
    const token = generateToken((user as UserDocument).toObject());
    console.log("‚úÖ Token JWT g√©n√©r√© avec succ√®s");

    // Configuration des cookies pour cross-origin
    const cookieOptions = {
      httpOnly: true,
      secure: process.env.NODE_ENV === 'production', // HTTPS requis en production
      sameSite: (process.env.NODE_ENV === 'production' ? 'none' : 'lax') as 'none' | 'lax' | 'strict',
      maxAge: 24 * 60 * 60 * 1000, // 24 heures
      path: '/',
      // Pas de domaine sp√©cifi√© pour permettre le cross-origin
    };

    console.log("üç™ Configuration du cookie:", {
      secure: cookieOptions.secure,
      sameSite: cookieOptions.sameSite,
      httpOnly: cookieOptions.httpOnly,
      nodeEnv: process.env.NODE_ENV
    });

    // D√©finir le cookie httpOnly s√©curis√©
    res.cookie('token', token, cookieOptions);

    // R√©pondre avec les informations de l'utilisateur (avec le token pour fallback)
    res.status(200).json({
      success: true,
      user: {
        _id: user._id,
        firstName: user.firstName,
        lastName: user.lastName,
        email: user.email,
        role: user.role,
        companyId: user.companyId,
        photoUrl: user.photoUrl || undefined,
      },
      // Envoyer aussi le token pour le fallback c√¥t√© frontend
      // En cas d'√©chec des cookies cross-origin
      token: token
    });

    console.log("‚úÖ Connexion r√©ussie pour:", email);
  } catch (error) {
    console.error("‚ùå Erreur login:", error);
    res.status(500).json({ success: false, message: "Erreur serveur" });
  }
});

/**
 * @route GET /api/auth/me
 * @desc Retourne les infos de l'utilisateur connect√©
 */
router.get("/me", authenticateToken, async (req: Request, res: Response) => {
  try {
    const user = await User.findById((req.user as any)?._id).select("-password");
    if (!user) {
      return res
        .status(404)
        .json({ success: false, message: "Utilisateur non trouv√©" });
    }

    res.status(200).json({
      success: true,
      data: {
        _id: user._id,
        firstName: user.firstName,
        lastName: user.lastName,
        email: user.email,
        role: user.role,
        status: user.status,
        companyId: user.companyId,
        teamIds: user.teamIds || [],
        photoUrl: user.photoUrl || undefined,
        profileCompleted: user.profileCompleted || false,
      },
    });
  } catch (error) {
    console.error("Erreur /me:", error);
    res.status(500).json({ success: false, message: "Erreur serveur" });
  }
});

/**
 * @route POST /api/auth/logout
 * @desc D√©connecte l'utilisateur en supprimant le cookie httpOnly
 */
router.post("/logout", (req: Request, res: Response) => {
  try {
    // Configuration identique √† celle du login pour supprimer le cookie
    const clearCookieOptions = {
      httpOnly: true,
      secure: process.env.NODE_ENV === 'production',
      sameSite: (process.env.NODE_ENV === 'production' ? 'none' : 'lax') as 'none' | 'lax' | 'strict',
      path: '/'
    };

    console.log("üç™ Suppression du cookie avec options:", clearCookieOptions);

    // Supprimer le cookie httpOnly
    res.clearCookie('token', clearCookieOptions);

    console.log("‚úÖ D√©connexion utilisateur r√©ussie");

    res.status(200).json({
      success: true,
      message: "D√©connexion r√©ussie",
    });
  } catch (error) {
    console.error("‚ùå Erreur logout:", error);
    res.status(500).json({ success: false, message: "Erreur serveur" });
  }
});

/**
 * @route POST /api/auth/forgot-password
 * @desc Demande de r√©initialisation de mot de passe
 * @access Public
 */
router.post("/forgot-password", async (req: Request, res: Response) => {
  try {
    const { email } = req.body;
    console.log("üìß Demande de r√©initialisation pour email:", email);

    if (!email) {
      return res.status(400).json({
        success: false,
        message: "L'adresse email est requise",
      });
    }

    // Rechercher l'utilisateur par email
    const user = await User.findOne({ email });
    console.log("üîç Utilisateur trouv√©:", user ? "Oui" : "Non");

    // G√©n√©rer un token m√™me si l'utilisateur n'existe pas (pour √©viter l'√©num√©ration d'email)
    const resetToken = crypto.randomBytes(32).toString("hex");
    console.log("üîë Token g√©n√©r√©");

    // Si l'utilisateur existe, sauvegarder le token (hash√©) et sa date d'expiration
    if (user) {
      // Cr√©er un hash du token pour le stockage s√©curis√©
      const resetPasswordToken = crypto
        .createHash("sha256")
        .update(resetToken)
        .digest("hex");

      // Sauvegarder le token et sa date d'expiration (1 heure)
      user.resetPasswordToken = resetPasswordToken;
      user.resetPasswordExpire = new Date(Date.now() + 3600000); // 1 heure

      await user.save();
      console.log("üíæ Token sauvegard√© en base de donn√©es");

      // Cr√©er le lien de r√©initialisation avec l'URL correcte
      const frontendBaseUrl =
        process.env.FRONTEND_URL || "http://localhost:3000";
      console.log("üåê URL frontend:", frontendBaseUrl);

      const resetUrl = `${frontendBaseUrl}/reset-password?token=${resetToken}&email=${email}`;
      console.log("üîó Lien de r√©initialisation:", resetUrl);

      // Pr√©parer le contenu de l'email
      const subject = "R√©initialisation de votre mot de passe SmartPlanning";
      const html = `
        <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px; border: 1px solid #e0e0e0; border-radius: 5px;">
          <div style="text-align: center; margin-bottom: 20px;">
            <h1 style="color: #4f46e5;">SmartPlanning</h1>
          </div>
          <p>Bonjour${user.firstName ? " " + user.firstName : ""},</p>
          <p>Vous avez demand√© la r√©initialisation de votre mot de passe pour votre compte SmartPlanning.</p>
          <p>Veuillez cliquer sur le bouton ci-dessous pour d√©finir un nouveau mot de passe :</p>
          <div style="text-align: center; margin: 30px 0;">
            <a href="${resetUrl}" style="background-color: #4f46e5; color: white; padding: 12px 20px; text-decoration: none; border-radius: 5px; font-weight: bold;">R√©initialiser mon mot de passe</a>
          </div>
          <p>Ce lien est valable pendant 1 heure. Apr√®s cette p√©riode, vous devrez faire une nouvelle demande de r√©initialisation.</p>
          <p>Si vous n'avez pas demand√© de r√©initialisation de mot de passe, vous pouvez ignorer cet email.</p>
          <p>Cordialement,<br>L'√©quipe SmartPlanning</p>
          <div style="margin-top: 30px; padding-top: 20px; border-top: 1px solid #e0e0e0; font-size: 12px; color: #666;">
            <p>Cet email a √©t√© envoy√© automatiquement, merci de ne pas y r√©pondre.</p>
            <p>¬© ${new Date().getFullYear()} SmartPlanning. Tous droits r√©serv√©s.</p>
          </div>
        </div>
      `;

      try {
        // D'abord essayer avec la configuration normale
        console.log(
          "üì® Tentative d'envoi d'email avec les param√®tres SMTP standards:"
        );
        console.log(
          `   Host: ${process.env.SMTP_HOST || "smtp.hostinger.com"}`
        );
        console.log(`   Port: ${process.env.SMTP_PORT || "465"}`);
        console.log(
          `   User: ${process.env.SMTP_USER || "contact@smartplanning.fr"}`
        );
        console.log(
          `   Pass: ${process.env.SMTP_PASS ? "******" : "Non d√©fini"}`
        );

        const emailSent = await sendPasswordResetEmail(
          email,
          resetUrl,
          user.firstName
        );
        console.log("üìß R√©sultat envoi email:", emailSent ? "Succ√®s" : "√âchec");

        // Si l'envoi normal √©choue, essayer avec Ethereal (service de test)
        if (!emailSent) {
          console.log("üìß Tentative avec service de test Ethereal...");
          const previewUrl = await sendTestEmail(email, subject, html);
          console.log(
            "üìß Email de test envoy√©. URL de pr√©visualisation:",
            previewUrl
          );
          // On pourrait stocker cette URL quelque part pour l'administrateur
        }
      } catch (emailError) {
        console.error(
          "üìß Erreur d√©taill√©e lors de l'envoi d'email:",
          emailError
        );

        // Essayer la m√©thode de secours
        try {
          console.log(
            "üìß Tentative de secours avec service de test Ethereal..."
          );
          const previewUrl = await sendTestEmail(email, subject, html);
          console.log(
            "üìß Email de test envoy√©. URL de pr√©visualisation:",
            previewUrl
          );
          // On pourrait stocker cette URL quelque part pour l'administrateur
        } catch (backupError) {
          console.error("üìß √âchec de la m√©thode de secours:", backupError);
        }
      }
    }

    // R√©pondre avec un message g√©n√©rique pour √©viter l'√©num√©ration d'emails
    res.status(200).json({
      success: true,
      message:
        "Si un compte existe avec cette adresse email, un email de r√©initialisation a √©t√© envoy√©.",
    });
  } catch (error) {
    console.error("Erreur de r√©initialisation de mot de passe:", error);
    res.status(500).json({
      success: false,
      message: "Une erreur est survenue lors du traitement de votre demande.",
    });
  }
});

/**
 * @route POST /api/auth/reset-password
 * @desc R√©initialisation du mot de passe avec token
 * @access Public
 */
router.post("/reset-password", async (req: Request, res: Response) => {
  try {
    const { email, token, newPassword } = req.body;

    if (!email || !token || !newPassword) {
      return res.status(400).json({
        success: false,
        message: "Tous les champs sont requis",
      });
    }

    // V√©rifier la complexit√© du mot de passe (RGPD)
    if (!validatePasswordComplexity(newPassword)) {
      return res.status(400).json({
        success: false,
        message: passwordRequirementsMessage,
      });
    }

    // Cr√©er le hash du token re√ßu pour comparaison
    const resetPasswordToken = crypto
      .createHash("sha256")
      .update(token)
      .digest("hex");

    // Rechercher l'utilisateur par email et token
    const user = await User.findOne({
      email,
      resetPasswordToken,
      resetPasswordExpire: { $gt: Date.now() }, // V√©rifier que le token n'a pas expir√©
    });

    if (!user) {
      return res.status(400).json({
        success: false,
        message: "Le token est invalide ou a expir√©",
      });
    }

    // Mettre √† jour le mot de passe
    user.password = newPassword;
    // Supprimer les champs de r√©initialisation
    user.resetPasswordToken = undefined;
    user.resetPasswordExpire = undefined;

    await user.save();

    res.status(200).json({
      success: true,
      message: "Votre mot de passe a √©t√© r√©initialis√© avec succ√®s",
    });
  } catch (error) {
    console.error("Erreur lors de la r√©initialisation du mot de passe:", error);
    res.status(500).json({
      success: false,
      message: "Une erreur est survenue lors du traitement de votre demande",
    });
  }
});

/**
 * @route POST /api/auth/create-password
 * @desc Cr√©ation du mot de passe pour un nouvel employ√© avec token
 * @access Public
 */
router.post("/create-password", async (req: Request, res: Response) => {
  try {
    const { email, token, password } = req.body;

    if (!email || !token || !password) {
      return res.status(400).json({
        success: false,
        message: "Tous les champs sont requis",
      });
    }

    // V√©rifier la complexit√© du mot de passe (RGPD)
    if (!validatePasswordComplexity(password)) {
      return res.status(400).json({
        success: false,
        message: passwordRequirementsMessage,
      });
    }

    // Cr√©er le hash du token re√ßu pour comparaison
    const createPasswordTokenHash = crypto
      .createHash("sha256")
      .update(token)
      .digest("hex");

    // Rechercher l'utilisateur par email et token
    const user = await User.findOne({
      email,
      resetPasswordToken: createPasswordTokenHash, // R√©utilise le champ resetPasswordToken
      resetPasswordExpire: { $gt: Date.now() }, // V√©rifier que le token n'a pas expir√©
      role: "employee", // S'assurer que c'est bien un employ√©
    });

    if (!user) {
      return res.status(400).json({
        success: false,
        message: "Le lien est invalide ou a expir√©",
      });
    }

    // V√©rifier que l'utilisateur n'a pas d√©j√† un mot de passe
    if (user.password) {
      return res.status(400).json({
        success: false,
        message: "Un mot de passe a d√©j√† √©t√© cr√©√© pour ce compte",
      });
    }

    // Mettre √† jour le mot de passe et v√©rifier l'email
    user.password = password;
    user.isEmailVerified = true;
    // Supprimer les champs de token
    user.resetPasswordToken = undefined;
    user.resetPasswordExpire = undefined;

    await user.save();

    res.status(200).json({
      success: true,
      message:
        "Votre mot de passe a √©t√© cr√©√© avec succ√®s. Vous pouvez maintenant vous connecter.",
    });
  } catch (error) {
    console.error("Erreur lors de la cr√©ation du mot de passe:", error);
    res.status(500).json({
      success: false,
      message: "Une erreur est survenue lors du traitement de votre demande",
    });
  }
});

/**
 * @route PATCH /api/users/me
 * @desc Mise √† jour du profil utilisateur apr√®s authentification OAuth
 * @access Priv√© (n√©cessite token JWT)
 */
router.patch(
  "/users/me",
  authenticateToken,
  async (req: Request, res: Response) => {
    try {
      // Acc√®s √† l'ID utilisateur depuis le token d√©cod√©
      const userId = (req.user as any)?.id;

      if (!userId) {
        return res.status(401).json({
          success: false,
          message: "Utilisateur non authentifi√©",
        });
      }

      // R√©cup√©rer les donn√©es du corps de la requ√™te
      const { companyName, companyLogo, phone, profilePicture, bio } = req.body;

      // V√©rifier que l'utilisateur existe
      const user = await User.findById(userId);
      if (!user) {
        return res.status(404).json({
          success: false,
          message: "Utilisateur non trouv√©",
        });
      }

      // Cr√©er un objet pour stocker les champs √† mettre √† jour
      const updates: any = {};

      // Si l'utilisateur n'a pas encore de companyId et veut cr√©er une entreprise
      if (!user.companyId && companyName) {
        // Validation du nom d'entreprise
        if (!companyName.trim()) {
          return res.status(400).json({
            success: false,
            message:
              "Le nom de l'entreprise est requis pour cr√©er une entreprise",
          });
        }

        // V√©rification de l'unicit√© du nom d'entreprise
        const existingCompany = await Company.findOne({ name: companyName });
        if (existingCompany) {
          return res.status(409).json({
            success: false,
            message:
              "Ce nom d'entreprise existe d√©j√†. Ajoutez une ville ou un suffixe pour le diff√©rencier.",
          });
        }

        // Validation de l'URL du logo si pr√©sente
        if (
          companyLogo &&
          typeof companyLogo === "string" &&
          !isValidUrl(companyLogo)
        ) {
          return res.status(400).json({
            success: false,
            message: "URL du logo d'entreprise invalide",
          });
        }

        // Cr√©ation de la nouvelle entreprise
        const newCompany = await Company.create({
          name: companyName,
          logoUrl: companyLogo || null,
          plan: "free", // Plan par d√©faut
        });

        // Associer l'ID de l'entreprise √† l'utilisateur
        updates.companyId = newCompany._id;
      }

      // Mise √† jour des autres champs si fournis
      if (phone !== undefined) {
        // Validation du num√©ro de t√©l√©phone si pr√©sent et non vide
        if (phone && typeof phone === "string") {
          const phoneRegex = /^(\+\d{1,3}\s?)?(\d{9,15})$/;
          if (!phoneRegex.test(phone)) {
            return res.status(400).json({
              success: false,
              message: "Format de num√©ro de t√©l√©phone invalide",
            });
          }
          updates.phone = phone;
        } else if (phone === "") {
          // Permettre de supprimer le num√©ro de t√©l√©phone
          updates.phone = undefined;
        }
      }

      // Mise √† jour de la photo de profil si fournie
      if (profilePicture !== undefined) {
        // Validation de l'URL de la photo si pr√©sente et non vide
        if (
          profilePicture &&
          typeof profilePicture === "string" &&
          !isValidUrl(profilePicture)
        ) {
          return res.status(400).json({
            success: false,
            message: "URL de la photo de profil invalide",
          });
        }
        updates.photoUrl = profilePicture || undefined;
      }

      // Mise √† jour de la bio si fournie
      if (bio !== undefined) {
        updates.bio = bio;
      }

      // Si aucune mise √† jour n'est n√©cessaire
      if (Object.keys(updates).length === 0) {
        return res.status(400).json({
          success: false,
          message: "Aucune donn√©e valide fournie pour la mise √† jour",
        });
      }

      // Effectuer la mise √† jour
      const updatedUser = await User.findByIdAndUpdate(
        userId,
        { $set: updates },
        { new: true, runValidators: true }
      );

      // Retourner la r√©ponse avec l'utilisateur mis √† jour
      res.status(200).json({
        success: true,
        message: "Profil mis √† jour",
        data: updatedUser,
      });
    } catch (error: any) {
      console.error("Erreur lors de la mise √† jour du profil:", error);

      // Gestion des erreurs sp√©cifiques de MongoDB
      if (error.name === "MongoServerError" && error.code === 11000) {
        // Gestion des violations de contrainte d'unicit√©
        if (error.keyPattern?.name) {
          return res.status(409).json({
            success: false,
            message:
              "Ce nom d'entreprise existe d√©j√†. Ajoutez une ville ou un suffixe pour le diff√©rencier.",
          });
        }
      }

      res.status(500).json({
        success: false,
        message: "Une erreur est survenue lors de la mise √† jour du profil",
        error:
          process.env.NODE_ENV === "development" ? error.message : undefined,
      });
    }
  }
);

/**
 * @route GET /api/auth/google
 * @desc Initialise l'authentification via Google OAuth
 * @access Public
 */
router.get("/google", (req: Request, res: Response, next: NextFunction) => {
  (
    passport.authenticate("google", {
      scope: ["profile", "email"],
      accessType: "offline",
      prompt: "select_account",
      redirect_uri: "https://smartplanning.fr/api/auth/google/callback",
    } as any) as express.RequestHandler
  )(req, res, next);
});

/**
 * @route GET /api/auth/google/callback
 * @desc Callback de l'authentification Google OAuth
 * @access Public
 */
router.get(
  "/google/callback",
  passport.authenticate("google", {
    failureRedirect: `${
      process.env.CLIENT_URL ||
      process.env.FRONTEND_URL ||
      "https://smartplanning.fr"
    }/connexion?error=googleauth`,
    session: false,
  }),
  (req: Request, res: Response) => {
    try {
      // L'utilisateur est authentifi√© √† ce stade
      if (!req.user) {
        return res.redirect(
          `${
            process.env.CLIENT_URL ||
            process.env.FRONTEND_URL ||
            "https://smartplanning.fr"
          }/connexion?error=usernotfound`
        );
      }

      // G√©n√©rer un token JWT pour l'utilisateur
      const token = generateToken((req.user as UserDocument).toObject());

      // Rediriger vers la page de callback OAuth du frontend avec le token JWT dans l'URL
      res.redirect(
        `${
          process.env.CLIENT_URL ||
          process.env.FRONTEND_URL ||
          "https://smartplanning.fr"
        }/oauth/callback?token=${token}`
      );
    } catch (error) {
      console.error("Erreur lors de l'authentification Google OAuth:", error);
      res.redirect(
        `${
          process.env.CLIENT_URL ||
          process.env.FRONTEND_URL ||
          "https://smartplanning.fr"
        }/connexion?error=internal`
      );
    }
  }
);

export default router;
