/**
 * Routes pour la gestion des employ√©s
 *
 * Ce fichier contient les routes permettant :
 * - de r√©cup√©rer tous les employ√©s (selon le r√¥le de l'utilisateur)
 * - de r√©cup√©rer les employ√©s d'une √©quipe sp√©cifique
 * - de r√©cup√©rer les employ√©s d'une entreprise sp√©cifique (directeur/admin)
 */

import { Request, Response, Router } from "express";
import mongoose from "mongoose";
import authenticateToken, { AuthRequest } from "../middlewares/auth.middleware";
import checkRole from "../middlewares/checkRole.middleware";
import EmployeeModel from "../models/Employee.model";
import { TeamModel } from "../models/Team.model";

const router = Router();

/**
 * @route   GET /api/employees
 * @desc    R√©cup√®re les employ√©s selon le r√¥le de l'utilisateur connect√©
 * @access  Private - Tous les r√¥les (filtrage dynamique des r√©sultats)
 */
router.get("/", authenticateToken, async (req: AuthRequest, res: Response) => {
  try {
    // üîê V√©rification de l'authentification
    if (!req.user || !req.user._id) {
      console.log("[GET /employees] Utilisateur non authentifi√©");
      return res.status(401).json({
        success: false,
        message: "Utilisateur non authentifi√©",
      });
    }

    // üìã Log de d√©bogage d√©taill√©
    console.log("----- D√âBUT D√âBOGAGE GET /EMPLOYEES -----");
    console.log(
      "[GET /employees] Utilisateur authentifi√©:",
      JSON.stringify(req.user, null, 2)
    );
    console.log(`[GET /employees] R√¥le original: "${req.user.role}"`);

    // üîÑ Normalisation du r√¥le pour √©viter les probl√®mes de casse
    const role = req.user.role?.toLowerCase();
    console.log(`[GET /employees] R√¥le normalis√© = "${role}"`);

    let employees = [];

    // üéØ Filtrage par r√¥le
    switch (role) {
      case "admin":
        // Admin voit tous les employ√©s
        console.log("[GET /employees] Filtrage pour admin: tous les employ√©s");
        employees = await EmployeeModel.find({})
          .populate("userId", "email")
          .populate("teamId", "name")
          .lean();
        break;

      case "directeur":
        // Directeur voit tous les employ√©s de son entreprise
        if (!req.user.companyId) {
          console.log(
            "[GET /employees] ERREUR: CompanyId manquant pour le directeur"
          );
          return res.status(400).json({
            success: false,
            message: "CompanyId manquant pour le directeur",
          });
        }

        console.log(
          `[GET /employees] Filtrage pour directeur: employ√©s de l'entreprise ${req.user.companyId}`
        );
        employees = await EmployeeModel.find({ companyId: req.user.companyId })
          .populate("userId", "email")
          .populate("teamId", "name")
          .lean();
        break;

      case "manager":
        // Manager voit tous les employ√©s des √©quipes qu'il g√®re
        // D'abord, r√©cup√©rer les √©quipes g√©r√©es par le manager
        console.log(
          `[GET /employees] Filtrage pour manager: employ√©s des √©quipes g√©r√©es par ${req.user._id}`
        );
        const managedTeams = await TeamModel.find(
          { managerIds: req.user._id },
          "_id"
        );
        const teamIds = managedTeams.map((team) => team._id);

        if (teamIds.length === 0) {
          console.log(
            "[GET /employees] Le manager ne g√®re aucune √©quipe, retournant un tableau vide"
          );
          return res.status(200).json({
            success: true,
            data: [],
          });
        }

        employees = await EmployeeModel.find({ teamId: { $in: teamIds } })
          .populate("userId", "email")
          .populate("teamId", "name")
          .lean();
        break;

      case "employ√©":
      case "employ√©e":
      case "employe":
      case "employee":
        // Employ√© voit uniquement lui-m√™me
        console.log(
          `[GET /employees] Filtrage pour employ√©: uniquement lui-m√™me (${req.user._id})`
        );

        // Chercher d'abord par userId qui r√©f√©rence l'utilisateur connect√©
        let employee = await EmployeeModel.findOne({ userId: req.user._id })
          .populate("userId", "email")
          .populate("teamId", "name")
          .lean();

        // Si non trouv√©, essayer avec _id (si l'employ√© est directement connect√© avec son ID d'employ√©)
        if (!employee) {
          employee = await EmployeeModel.findById(req.user._id)
            .populate("userId", "email")
            .populate("teamId", "name")
            .lean();
        }

        employees = employee ? [employee] : [];
        break;

      default:
        // R√¥le non reconnu
        console.log(
          `[GET /employees] ERREUR: R√¥le non reconnu ou non autoris√©: ${role} (original: ${req.user.role})`
        );
        return res.status(403).json({
          success: false,
          message: "R√¥le non autoris√©",
        });
    }

    // üìä Log du r√©sultat
    console.log(
      `[GET /employees] ${employees.length} employ√©s trouv√©s pour le r√¥le ${role}`
    );
    console.log("----- FIN D√âBOGAGE GET /EMPLOYEES -----");

    // ‚úÖ Retour des donn√©es
    return res.status(200).json({
      success: true,
      data: employees,
    });
  } catch (error) {
    // ‚ö†Ô∏è Gestion des erreurs
    console.error("[GET /employees] Erreur:", error);
    return res.status(500).json({
      success: false,
      message: "Erreur serveur lors de la r√©cup√©ration des employ√©s",
      error: error instanceof Error ? error.message : String(error),
    });
  }
});

/**
 * @route   GET /api/employees/team/:teamId
 * @desc    R√©cup√®re tous les employ√©s d'une √©quipe sp√©cifique
 * @access  Private
 */
router.get("/team/:teamId", async (req: Request, res: Response) => {
  try {
    const { teamId } = req.params;
    console.log(
      `[GET /employees/team/:teamId] Recherche des employ√©s pour l'√©quipe: ${teamId}`
    );

    // V√©rifier que l'ID d'√©quipe est un ObjectId valide
    if (!mongoose.Types.ObjectId.isValid(teamId)) {
      console.log(
        `[GET /employees/team/:teamId] ID d'√©quipe invalide: ${teamId}`
      );
      return res.status(400).json({
        success: false,
        message: "ID d'√©quipe invalide",
      });
    }

    // R√©cup√©rer l'√©quipe pour v√©rifier son existence
    const team = await TeamModel.findById(teamId);
    if (!team) {
      console.log(
        `[GET /employees/team/:teamId] √âquipe non trouv√©e: ${teamId}`
      );
      return res.status(404).json({
        success: false,
        message: "√âquipe introuvable",
      });
    }

    console.log(`[GET /employees/team/:teamId] √âquipe trouv√©e: ${team.name}`);

    // Utiliser la m√©thode statique pour r√©cup√©rer les employ√©s de l'√©quipe
    const employees = await EmployeeModel.find({ teamId })
      .populate("userId", "email")
      .lean();

    console.log(
      `[GET /employees/team/:teamId] ${employees.length} employ√©s trouv√©s`
    );

    return res.status(200).json({
      success: true,
      data: employees,
    });
  } catch (error) {
    console.error("[GET /employees/team/:teamId] Erreur:", error);
    return res.status(500).json({
      success: false,
      message: "Erreur serveur lors de la r√©cup√©ration des employ√©s",
      error: error instanceof Error ? error.message : String(error),
    });
  }
});

/**
 * @route   GET /api/employees/company/:companyId
 * @desc    R√©cup√®re tous les employ√©s d'une entreprise sp√©cifique
 * @access  Private - Directeur, Admin uniquement
 */
router.get(
  "/company/:companyId",
  authenticateToken,
  checkRole(["directeur", "admin"]),
  async (req: AuthRequest, res: Response) => {
    try {
      // üîê V√©rification des param√®tres
      const { companyId } = req.params;
      console.log(
        `[GET /employees/company/:companyId] Recherche des employ√©s pour l'entreprise: ${companyId}`
      );

      // ‚úÖ Validation de l'identifiant d'entreprise
      if (!mongoose.Types.ObjectId.isValid(companyId)) {
        console.log(
          `[GET /employees/company/:companyId] ID d'entreprise invalide: ${companyId}`
        );
        return res.status(400).json({
          success: false,
          message: "ID d'entreprise invalide",
        });
      }

      // üîÑ Normalisation du r√¥le pour la v√©rification
      const role = req.user.role?.toLowerCase();

      // üîç Restriction d'acc√®s pour les directeurs (uniquement leur propre entreprise)
      if (role === "directeur" && req.user.companyId !== companyId) {
        console.log(
          `[GET /employees/company/:companyId] Tentative d'acc√®s non autoris√©: le directeur (${req.user._id}) tente d'acc√©der √† une autre entreprise (${companyId})`
        );
        return res.status(403).json({
          success: false,
          message:
            "Vous n'√™tes pas autoris√© √† acc√©der aux employ√©s de cette entreprise",
        });
      }

      // üß† R√©cup√©ration des employ√©s de l'entreprise
      // Utiliser la m√©thode statique pour r√©cup√©rer les employ√©s de l'entreprise
      const employees = await EmployeeModel.find({ companyId })
        .populate("userId", "email")
        .populate("teamId", "name")
        .lean();

      console.log(
        `[GET /employees/company/:companyId] ${employees.length} employ√©s trouv√©s pour l'entreprise ${companyId}`
      );

      // ‚úÖ Retour des donn√©es
      return res.status(200).json({
        success: true,
        data: employees,
      });
    } catch (error) {
      // ‚ö†Ô∏è Gestion des erreurs
      console.error("[GET /employees/company/:companyId] Erreur:", error);
      return res.status(500).json({
        success: false,
        message: "Erreur serveur lors de la r√©cup√©ration des employ√©s",
        error: error instanceof Error ? error.message : String(error),
      });
    }
  }
);

export default router;
