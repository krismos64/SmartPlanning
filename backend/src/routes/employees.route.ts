/**
 * Routes pour la gestion des employ√©s
 *
 * Ce fichier contient les routes permettant :
 * - de r√©cup√©rer les employ√©s d'une √©quipe sp√©cifique
 * - de r√©cup√©rer les employ√©s d'une entreprise sp√©cifique (directeur/admin)
 */

import { Request, Response, Router } from "express";
import mongoose from "mongoose";
import authenticateToken, { AuthRequest } from "../middlewares/auth.middleware";
import checkRole from "../middlewares/checkRole.middleware";
import EmployeeModel from "../models/Employee.model";
import { TeamModel } from "../models/Team.model";

const router = Router();

/**
 * @route   GET /api/employees/team/:teamId
 * @desc    R√©cup√®re tous les employ√©s d'une √©quipe sp√©cifique
 * @access  Private
 */
router.get("/team/:teamId", async (req: Request, res: Response) => {
  try {
    const { teamId } = req.params;
    console.log(
      `[GET /employees/team/:teamId] Recherche des employ√©s pour l'√©quipe: ${teamId}`
    );

    // V√©rifier que l'ID d'√©quipe est un ObjectId valide
    if (!mongoose.Types.ObjectId.isValid(teamId)) {
      console.log(
        `[GET /employees/team/:teamId] ID d'√©quipe invalide: ${teamId}`
      );
      return res.status(400).json({
        success: false,
        message: "ID d'√©quipe invalide",
      });
    }

    // R√©cup√©rer l'√©quipe pour v√©rifier son existence
    const team = await TeamModel.findById(teamId);
    if (!team) {
      console.log(
        `[GET /employees/team/:teamId] √âquipe non trouv√©e: ${teamId}`
      );
      return res.status(404).json({
        success: false,
        message: "√âquipe introuvable",
      });
    }

    console.log(`[GET /employees/team/:teamId] √âquipe trouv√©e: ${team.name}`);

    // Utiliser la m√©thode statique pour r√©cup√©rer les employ√©s de l'√©quipe
    const employees = await EmployeeModel.find({ teamId })
      .populate("userId", "email")
      .lean();

    console.log(
      `[GET /employees/team/:teamId] ${employees.length} employ√©s trouv√©s`
    );

    return res.status(200).json({
      success: true,
      data: employees,
    });
  } catch (error) {
    console.error("[GET /employees/team/:teamId] Erreur:", error);
    return res.status(500).json({
      success: false,
      message: "Erreur serveur lors de la r√©cup√©ration des employ√©s",
      error: error instanceof Error ? error.message : String(error),
    });
  }
});

/**
 * @route   GET /api/employees/company/:companyId
 * @desc    R√©cup√®re tous les employ√©s d'une entreprise sp√©cifique
 * @access  Private - Directeur, Admin uniquement
 */
router.get(
  "/company/:companyId",
  authenticateToken,
  checkRole(["directeur", "admin"]),
  async (req: AuthRequest, res: Response) => {
    try {
      // üîê V√©rification des param√®tres
      const { companyId } = req.params;
      console.log(
        `[GET /employees/company/:companyId] Recherche des employ√©s pour l'entreprise: ${companyId}`
      );

      // ‚úÖ Validation de l'identifiant d'entreprise
      if (!mongoose.Types.ObjectId.isValid(companyId)) {
        console.log(
          `[GET /employees/company/:companyId] ID d'entreprise invalide: ${companyId}`
        );
        return res.status(400).json({
          success: false,
          message: "ID d'entreprise invalide",
        });
      }

      // üîç Restriction d'acc√®s pour les directeurs (uniquement leur propre entreprise)
      if (req.user.role === "directeur" && req.user.companyId !== companyId) {
        console.log(
          `[GET /employees/company/:companyId] Tentative d'acc√®s non autoris√©: le directeur (${req.user._id}) tente d'acc√©der √† une autre entreprise (${companyId})`
        );
        return res.status(403).json({
          success: false,
          message:
            "Vous n'√™tes pas autoris√© √† acc√©der aux employ√©s de cette entreprise",
        });
      }

      // üß† R√©cup√©ration des employ√©s de l'entreprise
      // Utiliser la m√©thode statique pour r√©cup√©rer les employ√©s de l'entreprise
      const employees = await EmployeeModel.find({ companyId })
        .populate("userId", "email")
        .populate("teamId", "name")
        .lean();

      console.log(
        `[GET /employees/company/:companyId] ${employees.length} employ√©s trouv√©s pour l'entreprise ${companyId}`
      );

      // ‚úÖ Retour des donn√©es
      return res.status(200).json({
        success: true,
        data: employees,
      });
    } catch (error) {
      // ‚ö†Ô∏è Gestion des erreurs
      console.error("[GET /employees/company/:companyId] Erreur:", error);
      return res.status(500).json({
        success: false,
        message: "Erreur serveur lors de la r√©cup√©ration des employ√©s",
        error: error instanceof Error ? error.message : String(error),
      });
    }
  }
);

export default router;
