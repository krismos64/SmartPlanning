/**
 * Routes pour la gestion des employ√©s
 *
 * Ces routes permettent de g√©rer les employ√©s de l'application :
 * - Lister tous les employ√©s actifs
 */

import express, { Request, Response } from "express";
import authenticateToken from "../middlewares/auth.middleware";
import { EmployeeModel } from "../models/Employee.model";

const router = express.Router();

/**
 * Route GET /api/employees
 * Liste tous les employ√©s actifs, tri√©s par nom puis pr√©nom
 * Retourne uniquement les champs _id, firstName et lastName
 */
router.get("/", authenticateToken, async (req: Request, res: Response) => {
  try {
    // üë®‚Äçüíº R√©cup√©ration des employ√©s actifs uniquement
    const employees = await EmployeeModel.find(
      { status: "actif" }, // Filtre sur le statut actif
      "_id firstName lastName" // Projection pour limiter les champs retourn√©s
    )
      .sort({ lastName: 1, firstName: 1 }) // Tri par nom puis pr√©nom
      .lean(); // Optimisation de la performance en retournant des objets JavaScript simples

    // ‚úÖ R√©ponse avec les employ√©s et succ√®s
    return res.status(200).json({
      success: true,
      data: employees,
    });
  } catch (error) {
    // ‚ùå Gestion des erreurs
    console.error("Erreur lors de la r√©cup√©ration des employ√©s:", error);
    return res.status(500).json({
      success: false,
      message: "Erreur serveur lors de la r√©cup√©ration des employ√©s",
      error: error instanceof Error ? error.message : String(error),
    });
  }
});

export default router;
