/**
 * Script pour corriger la synchronisation des employ√©s avec leurs √©quipes
 *
 * Ce script corrige deux probl√®mes :
 * 1. Employ√©s qui ont un teamId mais ne sont pas dans le tableau employeeIds de l'√©quipe
 * 2. √âquipes qui ont des employ√©s dans employeeIds mais ces employ√©s n'ont pas le bon teamId
 *
 * Usage: npx ts-node backend/scripts/fixTeamEmployees.ts
 */

import dotenv from "dotenv";
import mongoose from "mongoose";
import path from "path";

// Import des mod√®les
import EmployeeModel from "../src/models/Employee.model";
import TeamModel from "../src/models/Team.model";

// Charger les variables d'environnement
dotenv.config({ path: path.resolve(__dirname, "../.env") });

async function fixTeamEmployees(): Promise<void> {
  console.log(
    "üîß D√©but de la synchronisation des employ√©s avec les √©quipes...\n"
  );

  let totalEmployeesUpdated = 0;
  let totalTeamsUpdated = 0;
  let totalErrors = 0;

  try {
    // Connecter √† MongoDB
    if (!process.env.MONGODB_URI) {
      throw new Error(
        "MONGODB_URI n'est pas d√©fini dans les variables d'environnement"
      );
    }

    await mongoose.connect(process.env.MONGODB_URI);
    console.log("‚úÖ Connect√© √† MongoDB\n");

    // 1. R√©cup√©rer tous les employ√©s qui ont un teamId
    console.log("üìã R√©cup√©ration des employ√©s avec teamId...");
    const employeesWithTeam = await EmployeeModel.find({
      teamId: { $ne: null },
    }).lean();

    console.log(`Trouv√© ${employeesWithTeam.length} employ√©s avec un teamId\n`);

    // 2. Pour chaque employ√©, v√©rifier qu'il est dans l'√©quipe correspondante
    console.log("üîç V√©rification des employ√©s dans les √©quipes...");
    for (const employee of employeesWithTeam) {
      try {
        const team = await TeamModel.findById(employee.teamId);

        if (!team) {
          console.log(
            `‚ö†Ô∏è √âquipe ${employee.teamId} introuvable pour l'employ√© ${employee.firstName} ${employee.lastName}`
          );
          // Remettre le teamId √† null pour cet employ√©
          await EmployeeModel.findByIdAndUpdate(employee._id, { teamId: null });
          totalEmployeesUpdated++;
          continue;
        }

        // V√©rifier si l'employ√© est dans le tableau employeeIds de l'√©quipe
        const isInTeam = team.employeeIds.some(
          (empId) => empId.toString() === employee._id.toString()
        );

        if (!isInTeam) {
          console.log(
            `‚ûï Ajout de ${employee.firstName} ${employee.lastName} √† l'√©quipe ${team.name}`
          );
          await TeamModel.findByIdAndUpdate(team._id, {
            $addToSet: { employeeIds: employee._id },
          });
          totalTeamsUpdated++;
        }
      } catch (error) {
        console.error(
          `‚ùå Erreur pour l'employ√© ${employee.firstName} ${employee.lastName}:`,
          error
        );
        totalErrors++;
      }
    }

    // 3. R√©cup√©rer toutes les √©quipes et v√©rifier la coh√©rence inverse
    console.log("\nüîç V√©rification des √©quipes...");
    const teams = await TeamModel.find({}).lean();

    for (const team of teams) {
      try {
        if (!team.employeeIds || team.employeeIds.length === 0) {
          console.log(`‚ÑπÔ∏è √âquipe ${team.name} sans employ√©s`);
          continue;
        }

        // V√©rifier chaque employ√© dans l'√©quipe
        for (const employeeId of team.employeeIds) {
          const employee = await EmployeeModel.findById(employeeId);

          if (!employee) {
            console.log(
              `‚ö†Ô∏è Employ√© ${employeeId} introuvable, suppression de l'√©quipe ${team.name}`
            );
            await TeamModel.findByIdAndUpdate(team._id, {
              $pull: { employeeIds: employeeId },
            });
            totalTeamsUpdated++;
            continue;
          }

          // V√©rifier si l'employ√© a le bon teamId
          if (
            !employee.teamId ||
            employee.teamId.toString() !== team._id.toString()
          ) {
            console.log(
              `üîÑ Mise √† jour du teamId de ${employee.firstName} ${employee.lastName} vers l'√©quipe ${team.name}`
            );
            await EmployeeModel.findByIdAndUpdate(employee._id, {
              teamId: team._id,
            });
            totalEmployeesUpdated++;
          }
        }
      } catch (error) {
        console.error(`‚ùå Erreur pour l'√©quipe ${team.name}:`, error);
        totalErrors++;
      }
    }

    // 4. Rapport final
    console.log("\nüìä RAPPORT FINAL:");
    console.log(`‚úÖ Employ√©s mis √† jour: ${totalEmployeesUpdated}`);
    console.log(`‚úÖ √âquipes mises √† jour: ${totalTeamsUpdated}`);
    console.log(`‚ùå Erreurs: ${totalErrors}`);

    if (totalErrors === 0) {
      console.log("\nüéâ Synchronisation termin√©e avec succ√®s !");
    } else {
      console.log(
        `\n‚ö†Ô∏è Synchronisation termin√©e avec ${totalErrors} erreur(s)`
      );
    }
  } catch (error) {
    console.error("‚ùå Erreur fatale:", error);
  } finally {
    await mongoose.disconnect();
    console.log("\nüîå D√©connect√© de MongoDB");
  }
}

// Ex√©cuter le script si appel√© directement
if (require.main === module) {
  fixTeamEmployees().catch(console.error);
}

export default fixTeamEmployees;
