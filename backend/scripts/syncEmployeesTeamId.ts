/**
 * Script syncEmployeesTeamId.ts
 *
 * Ce script synchronise automatiquement les employ√©s avec leur √©quipe appropri√©e
 * en se basant sur les donn√©es de la collection teams. Pour chaque √©quipe,
 * les employ√©s list√©s dans employeeIds auront leur teamId mis √† jour.
 *
 * Usage: npx ts-node backend/scripts/syncEmployeesTeamId.ts
 */

import dotenv from "dotenv";
import mongoose from "mongoose";
import path from "path";

// Import des mod√®les
import EmployeeModel from "../src/models/Employee.model";
import TeamModel from "../src/models/Team.model";

// Charger les variables d'environnement
dotenv.config({ path: path.resolve(__dirname, "../../.env") });

/**
 * Fonction principale qui synchronise les employ√©s avec leur √©quipe
 */
async function syncEmployeesTeamId(): Promise<void> {
  // Statistiques pour le rapport final
  let totalEmployeesUpdated = 0;
  let totalErrors = 0;
  let totalTeams = 0;
  let totalTeamsWithoutEmployees = 0;

  try {
    // Se connecter √† MongoDB
    const mongoUri =
      process.env.MONGODB_URI ||
      "mongodb+srv://krismos:0dYH74uq8MU8xtX8a@smartplanningcluster.u62vb66.mongodb.net/smartplanning";
    console.log(`Connexion √† MongoDB: ${mongoUri}`);

    await mongoose.connect(mongoUri);
    console.log("Connect√© √† MongoDB avec succ√®s");

    // R√©cup√©rer toutes les √©quipes
    const teams = await TeamModel.find();
    totalTeams = teams.length;
    console.log(`${teams.length} √©quipes trouv√©es dans la base de donn√©es`);

    // Traiter chaque √©quipe
    for (const team of teams) {
      const teamId = team._id;
      console.log(`\nTraitement de l'√©quipe: ${team.name} (${teamId})`);

      // V√©rifier si l'√©quipe a des employ√©s
      if (!team.employeeIds || team.employeeIds.length === 0) {
        console.log(`Aucun employ√© assign√© √† l'√©quipe ${team.name}`);
        totalTeamsWithoutEmployees++;
        continue;
      }

      console.log(
        `${team.employeeIds.length} employ√©s √† synchroniser pour cette √©quipe`
      );

      // Utiliser Promise.all pour mettre √† jour tous les employ√©s en parall√®le
      const updatePromises = team.employeeIds.map(async (employeeId) => {
        try {
          // V√©rifier si l'employ√© existe
          const employeeExists = await EmployeeModel.exists({
            _id: employeeId,
          });

          if (!employeeExists) {
            console.log(
              `‚ö†Ô∏è Employ√© ${employeeId} non trouv√© dans la base de donn√©es`
            );
            totalErrors++;
            return;
          }

          // Mettre √† jour uniquement le champ teamId
          const result = await EmployeeModel.updateOne(
            { _id: employeeId },
            { $set: { teamId: teamId } }
          );

          if (result.modifiedCount > 0) {
            console.log(`‚úì Employ√© ${employeeId} assign√© √† l'√©quipe ${teamId}`);
            totalEmployeesUpdated++;
          } else if (result.matchedCount > 0) {
            console.log(`‚ÑπÔ∏è Employ√© ${employeeId} d√©j√† assign√© √† cette √©quipe`);
          } else {
            console.log(`‚ö†Ô∏è Employ√© ${employeeId} introuvable`);
            totalErrors++;
          }
        } catch (error) {
          console.error(
            `‚ùå Erreur lors de la mise √† jour de l'employ√© ${employeeId}:`,
            error
          );
          totalErrors++;
        }
      });

      // Attendre la fin de toutes les mises √† jour pour cette √©quipe
      await Promise.all(updatePromises);
    }

    // Afficher le rapport final
    console.log("\nüìä RAPPORT FINAL üìä");
    console.log("-------------------");
    console.log(`Total des √©quipes: ${totalTeams}`);
    console.log(`√âquipes sans employ√©s: ${totalTeamsWithoutEmployees}`);
    console.log(`Employ√©s mis √† jour: ${totalEmployeesUpdated}`);
    console.log(`Erreurs rencontr√©es: ${totalErrors}`);
    console.log("-------------------");
  } catch (error) {
    console.error("‚ùå Erreur globale lors de l'ex√©cution du script:", error);
    process.exit(1);
  } finally {
    // D√©connecter proprement de MongoDB
    await mongoose.disconnect();
    console.log("üì° D√©connexion de MongoDB");
  }
}

// Ex√©cuter la fonction principale
syncEmployeesTeamId()
  .then(() => {
    console.log("‚úÖ Script termin√© avec succ√®s");
    process.exit(0);
  })
  .catch((error) => {
    console.error("‚ùå Erreur non g√©r√©e:", error);
    process.exit(1);
  });
