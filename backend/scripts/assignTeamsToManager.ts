/**
 * Script pour attribuer des √©quipes √† un manager
 *
 * Ce script permet d'associer une ou plusieurs √©quipes √† un utilisateur manager
 * pour qu'il puisse acc√©der aux employ√©s de ces √©quipes.
 */

import dotenv from "dotenv";
import mongoose from "mongoose";
import TeamModel, { ITeam } from "../src/models/Team.model";
import { User } from "../src/models/User.model";

// Charger les variables d'environnement
dotenv.config();

// Connexion √† la base de donn√©es
mongoose
  .connect(process.env.MONGODB_URI || "mongodb://localhost:27017/smartplanning")
  .then(() => console.log("‚úÖ Connected to MongoDB"))
  .catch((err) => {
    console.error("‚ùå Error connecting to MongoDB:", err);
    process.exit(1);
  });

// Fonction principale
async function assignTeamsToManager() {
  try {
    // Param√®tres √† configurer
    const managerEmail = process.argv[2]; // Email du manager
    const teamIds = process.argv.slice(3); // Liste d'IDs d'√©quipes √† associer

    if (!managerEmail) {
      console.error("‚ùå Veuillez sp√©cifier l'email du manager");
      console.log(
        "Usage: npm run assign-teams-to-manager <email_manager> <teamId1> [teamId2 ...]"
      );
      process.exit(1);
    }

    console.log(`üìù Recherche du manager avec l'email: ${managerEmail}`);
    const manager = await User.findOne({ email: managerEmail });

    if (!manager) {
      console.error(
        `‚ùå Aucun utilisateur trouv√© avec l'email: ${managerEmail}`
      );
      process.exit(1);
    }

    if (manager.role !== "manager") {
      console.error(
        `‚ùå L'utilisateur ${managerEmail} n'est pas un manager (r√¥le actuel: ${manager.role})`
      );
      console.log("üîÑ Mise √† jour du r√¥le en 'manager'");
      manager.role = "manager";
    }

    // V√©rifier les √©quipes sp√©cifi√©es
    let validTeamIds: mongoose.Types.ObjectId[] = [];

    if (teamIds.length === 0) {
      // Si aucune √©quipe n'est sp√©cifi√©e, attribuer toutes les √©quipes disponibles
      console.log(
        "üîç Aucune √©quipe sp√©cifi√©e, recherche de toutes les √©quipes disponibles"
      );

      // Si le manager a une entreprise assign√©e, filtrer par entreprise
      const companyFilter = manager.companyId
        ? { companyId: manager.companyId }
        : {};
      const teams = await TeamModel.find(companyFilter);

      if (teams.length === 0) {
        console.error("‚ùå Aucune √©quipe trouv√©e dans la base de donn√©es");
        process.exit(1);
      }

      validTeamIds = teams.map((team: ITeam) => team._id);
      console.log(`‚úÖ ${teams.length} √©quipes trouv√©es`);
    } else {
      // V√©rifier chaque ID d'√©quipe sp√©cifi√©
      for (const teamId of teamIds) {
        if (!mongoose.Types.ObjectId.isValid(teamId)) {
          console.error(`‚ùå ID d'√©quipe invalide: ${teamId}`);
          continue;
        }

        const team = await TeamModel.findById(teamId);
        if (!team) {
          console.error(`‚ùå √âquipe non trouv√©e avec l'ID: ${teamId}`);
          continue;
        }

        validTeamIds.push(team._id);
        console.log(`‚úÖ √âquipe valide: ${team.name} (${teamId})`);
      }

      if (validTeamIds.length === 0) {
        console.error(
          "‚ùå Aucune √©quipe valide trouv√©e parmi les IDs sp√©cifi√©s"
        );
        process.exit(1);
      }
    }

    // Mettre √† jour le manager avec les √©quipes valid√©es
    console.log(
      `üîÑ Attribution de ${validTeamIds.length} √©quipes au manager ${manager.firstName} ${manager.lastName}`
    );

    manager.teamIds = validTeamIds;
    await manager.save();

    console.log("‚úÖ Mise √† jour r√©ussie!");
    console.log("üìã D√©tails du manager:");
    console.log(`- Nom: ${manager.firstName} ${manager.lastName}`);
    console.log(`- Email: ${manager.email}`);
    console.log(`- R√¥le: ${manager.role}`);
    console.log(`- √âquipes assign√©es: ${validTeamIds.length}`);
    console.log(`- IDs des √©quipes: ${validTeamIds.join(", ")}`);
  } catch (error) {
    console.error("‚ùå Une erreur est survenue:", error);
  } finally {
    // Fermer la connexion √† la base de donn√©es
    await mongoose.disconnect();
    console.log("üîå D√©connect√© de MongoDB");
  }
}

// Ex√©cution de la fonction principale
assignTeamsToManager();
