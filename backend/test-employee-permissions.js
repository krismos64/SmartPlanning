/**
 * Script de test pour valider les permissions des employ√©s sur les plannings
 *
 * Ce script teste que :
 * 1. Les employ√©s ne peuvent voir que leurs propres plannings
 * 2. Les employ√©s ne peuvent pas cr√©er/modifier/supprimer de plannings
 * 3. Les employ√©s peuvent g√©n√©rer des PDFs de leurs plannings
 */

const API_BASE_URL = "http://localhost:5050/api";

async function testEmployeePermissions() {
  console.log("üîç Test des permissions employ√© pour les plannings\n");

  // Simulation d'un token d'employ√© (remplacer par un vrai token en test)
  const employeeToken = "EMPLOYEE_JWT_TOKEN_HERE";

  const headers = {
    Authorization: `Bearer ${employeeToken}`,
    "Content-Type": "application/json",
  };

  try {
    // Test 1: R√©cup√©ration des plannings (ne doit retourner que ceux de l'employ√©)
    console.log("üìã Test 1: R√©cup√©ration des plannings...");
    const response = await fetch(
      `${API_BASE_URL}/weekly-schedules/week/2024/1`,
      {
        headers,
      }
    );

    if (response.ok) {
      const data = await response.json();
      console.log(`‚úÖ Succ√®s: ${data.count} planning(s) r√©cup√©r√©(s)`);

      // V√©rifier que tous les plannings appartiennent √† l'employ√© connect√©
      if (data.data && data.data.length > 0) {
        const allBelongToEmployee = data.data.every(
          (schedule) => schedule.employeeId === "EMPLOYEE_ID_HERE" // Remplacer par l'ID r√©el
        );

        if (allBelongToEmployee) {
          console.log("‚úÖ Tous les plannings appartiennent bien √† l'employ√©");
        } else {
          console.log("‚ùå Certains plannings ne devraient pas √™tre visibles");
        }
      }
    } else {
      console.log(`‚ùå Erreur: ${response.status} - ${response.statusText}`);
    }

    // Test 2: Tentative de cr√©ation d'un planning (doit √©chouer)
    console.log("\nüìù Test 2: Tentative de cr√©ation de planning...");
    const createResponse = await fetch(`${API_BASE_URL}/weekly-schedules`, {
      method: "POST",
      headers,
      body: JSON.stringify({
        employeeId: "SOME_EMPLOYEE_ID",
        year: 2024,
        weekNumber: 1,
        scheduleData: { monday: ["09:00-17:00"] },
        dailyNotes: {},
        notes: "Test planning",
        dailyDates: { monday: new Date().toISOString() },
        totalWeeklyMinutes: 480,
      }),
    });

    if (createResponse.status === 403 || createResponse.status === 401) {
      console.log("‚úÖ Cr√©ation de planning correctement bloqu√©e");
    } else {
      console.log(
        `‚ùå Cr√©ation de planning autoris√©e (statut: ${createResponse.status})`
      );
    }

    // Test 3: Tentative de modification d'un planning (doit √©chouer)
    console.log("\n‚úèÔ∏è Test 3: Tentative de modification de planning...");
    const updateResponse = await fetch(
      `${API_BASE_URL}/weekly-schedules/SOME_SCHEDULE_ID`,
      {
        method: "PUT",
        headers,
        body: JSON.stringify({
          employeeId: "SOME_EMPLOYEE_ID",
          year: 2024,
          weekNumber: 1,
          scheduleData: { monday: ["10:00-18:00"] },
          dailyNotes: {},
          notes: "Planning modifi√©",
          dailyDates: { monday: new Date().toISOString() },
          totalWeeklyMinutes: 480,
        }),
      }
    );

    if (updateResponse.status === 403 || updateResponse.status === 401) {
      console.log("‚úÖ Modification de planning correctement bloqu√©e");
    } else {
      console.log(
        `‚ùå Modification de planning autoris√©e (statut: ${updateResponse.status})`
      );
    }

    // Test 4: Tentative de suppression d'un planning (doit √©chouer)
    console.log("\nüóëÔ∏è Test 4: Tentative de suppression de planning...");
    const deleteResponse = await fetch(
      `${API_BASE_URL}/weekly-schedules/SOME_SCHEDULE_ID`,
      {
        method: "DELETE",
        headers,
      }
    );

    if (deleteResponse.status === 403 || deleteResponse.status === 401) {
      console.log("‚úÖ Suppression de planning correctement bloqu√©e");
    } else {
      console.log(
        `‚ùå Suppression de planning autoris√©e (statut: ${deleteResponse.status})`
      );
    }

    console.log("\nüéâ Tests des permissions employ√© termin√©s");
  } catch (error) {
    console.error("‚ùå Erreur lors des tests:", error.message);
  }
}

// Instructions d'utilisation
console.log(`
üìù Instructions pour utiliser ce script de test :

1. Remplacer 'EMPLOYEE_JWT_TOKEN_HERE' par un vrai token JWT d'employ√©
2. Remplacer 'EMPLOYEE_ID_HERE' par l'ID r√©el de l'employ√© 
3. Remplacer 'SOME_EMPLOYEE_ID' et 'SOME_SCHEDULE_ID' par des IDs valides
4. Lancer le script avec : node test-employee-permissions.js

üîß Pour obtenir un token d'employ√© :
- Se connecter via l'interface frontend en tant qu'employ√©
- V√©rifier le localStorage pour r√©cup√©rer le token JWT
- Ou utiliser l'API de connexion directement

`);

// D√©commenter la ligne suivante pour lancer les tests
// testEmployeePermissions();
