#!/bin/bash

# ============================================================================
# Script de test de la base de donn√©es PostgreSQL SmartPlanning
# ============================================================================
# Usage: ./test-database.sh
# Pr√©-requis: PostgreSQL install√©, psql disponible
# ============================================================================

set -e  # Arr√™ter en cas d'erreur

# Configuration PostgreSQL PATH (Homebrew macOS)
export PATH="/opt/homebrew/opt/postgresql@15/bin:$PATH"

# Couleurs pour output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
DB_NAME="smartplanning_test"
DB_USER="${POSTGRES_USER:-$(whoami)}"
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
SQL_SCRIPT="$SCRIPT_DIR/init-smartplanning-postgresql.sql"

echo -e "${BLUE}============================================================================${NC}"
echo -e "${BLUE}üß™ SmartPlanning PostgreSQL - Test Database${NC}"
echo -e "${BLUE}============================================================================${NC}"
echo ""

# V√©rifier que le script SQL existe
if [ ! -f "$SQL_SCRIPT" ]; then
    echo -e "${RED}‚ùå Erreur: Script SQL introuvable: $SQL_SCRIPT${NC}"
    exit 1
fi

echo -e "${YELLOW}üìã Configuration:${NC}"
echo "   - Base de donn√©es: $DB_NAME"
echo "   - Utilisateur: $DB_USER"
echo "   - Script: $SQL_SCRIPT"
echo ""

# Supprimer l'ancienne base de test si elle existe
echo -e "${YELLOW}üóëÔ∏è  Suppression de l'ancienne base de test (si existe)...${NC}"
dropdb --if-exists "$DB_NAME" -U "$DB_USER" 2>/dev/null || true
echo -e "${GREEN}   ‚úì Ancien base supprim√©e${NC}"

# Cr√©er une nouvelle base de test
echo -e "${YELLOW}üÜï Cr√©ation de la base de test...${NC}"
createdb "$DB_NAME" -U "$DB_USER" --encoding=UTF8
echo -e "${GREEN}   ‚úì Base cr√©√©e${NC}"

# Ex√©cuter le script SQL
echo -e "${YELLOW}‚öôÔ∏è  Ex√©cution du script SQL...${NC}"
psql -d "$DB_NAME" -U "$DB_USER" -f "$SQL_SCRIPT" -q
echo -e "${GREEN}   ‚úì Script ex√©cut√©${NC}"
echo ""

# Tests de validation
echo -e "${BLUE}============================================================================${NC}"
echo -e "${BLUE}üîç Validation de la base de donn√©es${NC}"
echo -e "${BLUE}============================================================================${NC}"
echo ""

# Test 1: Compter les tables
echo -e "${YELLOW}Test 1: Nombre de tables cr√©√©es${NC}"
TABLE_COUNT=$(psql -d "$DB_NAME" -U "$DB_USER" -t -c "SELECT COUNT(*) FROM information_schema.tables WHERE table_schema = 'public' AND table_type = 'BASE TABLE';")
EXPECTED_TABLES=20
if [ "$TABLE_COUNT" -eq "$EXPECTED_TABLES" ]; then
    echo -e "${GREEN}   ‚úì $TABLE_COUNT tables cr√©√©es (attendu: $EXPECTED_TABLES)${NC}"
else
    echo -e "${RED}   ‚úó Erreur: $TABLE_COUNT tables cr√©√©es (attendu: $EXPECTED_TABLES)${NC}"
    exit 1
fi

# Test 2: V√©rifier les extensions
echo -e "${YELLOW}Test 2: Extensions PostgreSQL${NC}"
EXTENSIONS=$(psql -d "$DB_NAME" -U "$DB_USER" -t -c "SELECT COUNT(*) FROM pg_extension WHERE extname IN ('uuid-ossp', 'pg_trgm', 'btree_gin');")
if [ "$EXTENSIONS" -eq 3 ]; then
    echo -e "${GREEN}   ‚úì 3 extensions install√©es${NC}"
else
    echo -e "${RED}   ‚úó Erreur: $EXTENSIONS extensions (attendu: 3)${NC}"
fi

# Test 3: V√©rifier les r√¥les syst√®me
echo -e "${YELLOW}Test 3: R√¥les syst√®me (seeds)${NC}"
ROLES=$(psql -d "$DB_NAME" -U "$DB_USER" -t -c "SELECT COUNT(*) FROM role WHERE is_system_role = TRUE;")
if [ "$ROLES" -eq 4 ]; then
    echo -e "${GREEN}   ‚úì 4 r√¥les syst√®me cr√©√©s${NC}"
else
    echo -e "${RED}   ‚úó Erreur: $ROLES r√¥les (attendu: 4)${NC}"
fi

# Test 4: V√©rifier les permissions
echo -e "${YELLOW}Test 4: Permissions syst√®me${NC}"
PERMISSIONS=$(psql -d "$DB_NAME" -U "$DB_USER" -t -c "SELECT COUNT(*) FROM permission;")
if [ "$PERMISSIONS" -eq 14 ]; then
    echo -e "${GREEN}   ‚úì 14 permissions cr√©√©es${NC}"
else
    echo -e "${RED}   ‚úó Erreur: $PERMISSIONS permissions (attendu: 14)${NC}"
fi

# Test 5: V√©rifier les index
echo -e "${YELLOW}Test 5: Index cr√©√©s${NC}"
INDEXES=$(psql -d "$DB_NAME" -U "$DB_USER" -t -c "SELECT COUNT(*) FROM pg_indexes WHERE schemaname = 'public';")
echo -e "${GREEN}   ‚úì $INDEXES index cr√©√©s${NC}"

# Test 6: V√©rifier les triggers
echo -e "${YELLOW}Test 6: Triggers cr√©√©s${NC}"
TRIGGERS=$(psql -d "$DB_NAME" -U "$DB_USER" -t -c "SELECT COUNT(*) FROM pg_trigger WHERE tgname LIKE 'update_%_updated_at';")
echo -e "${GREEN}   ‚úì $TRIGGERS triggers cr√©√©s${NC}"

# Test 7: V√©rifier les vues
echo -e "${YELLOW}Test 7: Vues utilitaires${NC}"
VIEWS=$(psql -d "$DB_NAME" -U "$DB_USER" -t -c "SELECT COUNT(*) FROM information_schema.views WHERE table_schema = 'public';")
if [ "$VIEWS" -eq 2 ]; then
    echo -e "${GREEN}   ‚úì 2 vues cr√©√©es${NC}"
else
    echo -e "${RED}   ‚úó Erreur: $VIEWS vues (attendu: 2)${NC}"
fi

# Test 8: Insertion test
echo -e "${YELLOW}Test 8: Insertion de donn√©es test${NC}"
psql -d "$DB_NAME" -U "$DB_USER" -q <<EOF
-- Cr√©er une entreprise test
INSERT INTO company (name, sector, size) VALUES ('Test Company', 'retail', 'small');

-- Cr√©er un utilisateur test
INSERT INTO "user" (email, password, first_name, last_name, role, company_id)
VALUES ('test@smartplanning.fr', 'hashed_password', 'Test', 'User', 'admin', 1);

-- V√©rifier l'insertion
SELECT COUNT(*) FROM company;
SELECT COUNT(*) FROM "user";
EOF
echo -e "${GREEN}   ‚úì Insertion de donn√©es r√©ussie${NC}"

# Test 9: Contraintes FK
echo -e "${YELLOW}Test 9: Test contraintes Foreign Key${NC}"
FK_TEST=$(psql -d "$DB_NAME" -U "$DB_USER" -t -c "
    INSERT INTO employee (user_id, company_id, contractual_hours)
    VALUES (1, 1, 35);
    SELECT COUNT(*) FROM employee;
" 2>&1 | grep -c "1" || true)
if [ "$FK_TEST" -eq 1 ]; then
    echo -e "${GREEN}   ‚úì Contraintes FK fonctionnelles${NC}"
else
    echo -e "${YELLOW}   ‚ö† Warning: Test FK incomplet${NC}"
fi

# Test 10: Cascade DELETE
echo -e "${YELLOW}Test 10: Test CASCADE DELETE${NC}"
psql -d "$DB_NAME" -U "$DB_USER" -q <<EOF
-- Supprimer l'entreprise doit cascader
DELETE FROM company WHERE id = 1;

-- V√©rifier que l'utilisateur a √©t√© supprim√© (CASCADE)
SELECT COUNT(*) FROM "user" WHERE company_id = 1;
EOF
echo -e "${GREEN}   ‚úì CASCADE DELETE fonctionnel${NC}"

echo ""
echo -e "${BLUE}============================================================================${NC}"
echo -e "${GREEN}‚úÖ Tous les tests r√©ussis !${NC}"
echo -e "${BLUE}============================================================================${NC}"
echo ""
echo -e "${YELLOW}üìä Statistiques de la base:${NC}"
psql -d "$DB_NAME" -U "$DB_USER" -c "
    SELECT
        schemaname,
        tablename,
        pg_size_pretty(pg_total_relation_size(schemaname||'.'||tablename)) AS size
    FROM pg_tables
    WHERE schemaname = 'public'
    ORDER BY pg_total_relation_size(schemaname||'.'||tablename) DESC
    LIMIT 10;
"

echo ""
echo -e "${BLUE}üéØ Prochaines √©tapes:${NC}"
echo "   1. Conserver la base de test: Ne rien faire"
echo "   2. Supprimer la base de test: dropdb $DB_NAME"
echo "   3. Utiliser pour dev: Modifier DATABASE_URL dans .env"
echo ""
echo -e "${GREEN}Script de test termin√© avec succ√®s !${NC}"
